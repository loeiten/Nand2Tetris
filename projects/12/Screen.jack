// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
  static Array twoToThe;
  static Array screenMap;
  static Array yCoordinate;
  static Array xCoordinate;
  static boolean color;

  /** Initialize the Screen. */
  function void init() {
    var int outerLoop;
    var int innerLoop;
    var int index;
    var int value;

    let color = true;
    let screenMap = 16384;

    // We use the same trick as in the Math class
    let twoToThe = Array.new(17);
    let twoToThe[0] = 1;
    let twoToThe[1] = 2;
    let twoToThe[2] = 4;
    let twoToThe[3] = 8;
    let twoToThe[4] = 16;
    let twoToThe[5] = 32;
    let twoToThe[6] = 64;
    let twoToThe[7] = 128;
    let twoToThe[8] = 256;
    let twoToThe[9] = 512;
    let twoToThe[10] = 1024;
    let twoToThe[11] = 2048;
    let twoToThe[12] = 4096;
    let twoToThe[13] = 8192;
    let twoToThe[14] = 16384;
    // The below gives integer constant too big
    // let twoToThe[15] = 32768;
    let twoToThe[15] = 32767 + 1;
    // Needed for masking horizontal lines
    let twoToThe[16] = 0;

    // Make a look-up table which replaces the need for multiplication
    // http://nand2tetris-questions-and-answers-forum.52.s1.nabble.com/Small-Optimizations-for-Screen-jack-td4036176.html
    // 256 rows
    // A speed-up could be to fill these manually
    // We could have done innerLoop*32 256 times, however, this would have taken long time
    // Instead we use +
    let index = 0;
    let value = 0;
    let yCoordinate = Array.new(256);
    while(index < 256){
      let yCoordinate[index] = value;
      let index = index + 1;
      let value = value + 32;
    }
    // 512 columns
    // A speed-up could be to fill these manually
    // We could have done counter/16 512 times, however, this would take long time
    // Instead we will exploit that the integer part changes every 16 times
    let value = 0;
    let index = 0;
    let outerLoop = 0;
    let innerLoop = 0;
    let xCoordinate = Array.new(512);
    while(outerLoop < 32){
      while(innerLoop < 16){
        let xCoordinate[index] = value;
        let index = index + 1;
        let innerLoop = innerLoop + 1;
      }
      let innerLoop = 0;
      let value = value + 1;
      let outerLoop = outerLoop + 1;
    }
    return;
  }

  /** Erase the entire screen. */
  function void clearScreen() {
    var int address;
    let address = 0;
    // First screen address = 16384
    // Last screen address = 24575
    // 24575 - 16384 = 8191
    // Since we want to include the last address, we get
    while(address < 8192){
      let screenMap[address] = 0;
      let address = address + 1;
    }
    return;
  }

  /**
   * Set the current color, to be used for all subsequent drawXXX commands.
   *
   * \param b Color to set: Black is represented by true, white by false.
   */
  function void setColor(boolean b) {
    let color = b;
    return;
  }

  /**
   * Draw the (x,y) pixel, using the current color.
   *
   * NOTE: Having the row as first column is opposite of the matrix notation
   *
   * \param x The pixel column
   * \param y The pixel row
   */
  function void drawPixel(int x, int y) {
    var int address;
    var int bitValue;

    let address = xCoordinate[x] + yCoordinate[y];

    // We can use modulus 16, but it's cheaper to use bitwise & 15 which gives the same
    let bitValue = twoToThe[x & 15];

    // Instead of using peek and poke, we can set the memory directly
    if (color){
      // The color is black (i.e. 1), so we can check if any of the bits are 1
      let screenMap[address] = screenMap[address] | bitValue;
    }
    else {
      // The color is white (i.e. 0)
      // We only want white on the bit we selected, no-one else
      // To do this we can invert the bit, so that it's only 0 at the value we want to
      // turn off, and check if both bits are 1 to turn them on
      let screenMap[address] = screenMap[address] & (~bitValue);
    }
    return;
  }

  /**
   * Draw a line from pixel (x1,y1) to pixel (x2,y2), using the current color.
   *
   * We will use the Bresenham's line algorithm:
   * http://en.wikipedia.org/wiki/Bresenham's_line_algorithm
   *
   * \param x1 The start column of the line
   * \param y1 The start row of the line
   * \param x2 The end column of the line
   * \param y2 The end row of the line
   */
  function void drawLine(int x1, int y1, int x2, int y2) {
    var int dx;
    var int dy;
    var int slopeX;
    var int slopeY;
    var int err;
    var int e2;

    var int xStart;
    var int xEnd;
    var int yStart;
    var int yEnd;

    let dx = Math.abs(x2 - x1);
    // NOTE: This is usually defined negatively
    let dy = Math.abs(y2 - y1);

    // Special case: Horizontal line
    if (dy=0){
      if (x1<x2){
        let xStart = x1;
        let xEnd = x2;
      } else{
        let xStart = x2;
        let xEnd = x1;
      }
      do Screen.drawHorizontalLine(xStart, xEnd, y1, 1);
    }

    // Special case: Vertical line
    if (dx=0){
      if (y1<y2){
        let yStart = y1;
        let yEnd = y2;
      } else{
        let yStart = y2;
        let yEnd = y1;
      }
      do Screen.drawVerticalLine(yStart, yEnd, x1);
    }

    if(x1 < x2) {
      let slopeX = 1;
    } else {
      let slopeX = -1;
    }

    if(y1 < y2) {
      let slopeY = 1;
    } else {
      let slopeY = -1;
    }

    let err = dx - dy;

    while(~((x1 = x2) & (y1 = y2))) {
      do Screen.drawPixel(x1, y1);
      let e2 = err + err;

      if(e2 > -dy) {
        let err = err - dy;
        let x1 = x1 + slopeX;
      }

      if(e2 < dx) {
        let err = err + dx;
        let y1 = y1 + slopeY;
      }
    }

    do Screen.drawPixel(x1, y1);

    return;
  }

  /**
   * Draw a horizontal line.
   *
   * \param xStart The start of the line
   * \param xEnd The end of the line
   * \param y The y-coordinate
   * \param repeat How many rows to repeat the drawing for
   */
  function void drawHorizontalLine(int xStart, int xEnd, int y, int repeat){
    var int address;
    var int startAddress;
    var int endAddress;

    var int startBit;
    var int endBit;

    var int startMask;
    var int endMask;
    var int combinedMask;
    var int notStartMask;
    var int notEndMask;
    var int notCombinedMask;

    var int counter;

    let counter = 0;

    // Set the start and end address
    // | startAddress | startAddress + 1 | ... | endAddress |
    let startAddress = xCoordinate[xStart] + yCoordinate[y];
    let endAddress = xCoordinate[xEnd] + yCoordinate[y];

    // We can now have three cases
    // Recall that Hack is little-endianness
    // You would normally write a binary digit the mirrored way i.e.
    // 2**15 + 2**14 + ... + 2**0

    // Case 1:
    //     startAddress     startAddress + 1   ...      endAddress
    // | 0 1 ... 13 14 15 | 0 1 ... 13 14 15 | ... | 0 1 ... 13 14 15 |
    //            ^                                    ^
    //         startBit                              endBit

    // Case 2:
    //     startAddress        endAddress
    // | 0 1 ... 13 14 15 | 0 1 ... 13 14 15 |
    //            ^           ^
    //         startBit     endBit

    // Case 3:
    // startAddress = endAddress
    // | 0 1 2 ... 12 13 14 15 |
    //     ^           ^
    //  startBit     endBit

    let startBit = xStart & 15;
    let endBit = xEnd & 15;

    // We will create a mask for the startAddress and endAddress
    // NOTE: We can fill all bits from a number by subtracting 1 from twoToThe
    let startMask = ~(twoToThe[startBit] - 1);
    let endMask = twoToThe[endBit + 1] - 1;
    let combinedMask = startMask & endMask;

    let notStartMask = ~startMask;
    let notEndMask = ~endMask;
    let notCombinedMask = ~combinedMask;

    let address = startAddress;

    // We handle case 3 separately, and ensure that the while-loop is innermost
    if (startAddress = endAddress){
      // Instead of using peek and poke, we can set the memory directly
      if (color){
        while (counter < repeat){
          // The color is black (i.e. 1), so we can check if any of the bits are 1
          let screenMap[address] = screenMap[address] | combinedMask;
          let counter = counter + 1;
          let address = address + 32;
        }
      }
      else {
        while (counter < repeat){
          // The color is white (i.e. 0)
          // We only want white on the bit we selected, no-one else
          // To do this we can invert the bit, so that it's only 0 at the value we want to
          // turn off, and check if both bits are 1 to turn them on
          let screenMap[address] = screenMap[address] & notCombinedMask;
          let counter = counter + 1;
          let address = address + 32;
        }
      }
    }
    else {
      // Handle case 1 and 2 at the same time
      if (color){
        while(counter < repeat){
          let screenMap[startAddress] = screenMap[startAddress] | startMask;
          let screenMap[endAddress] = screenMap[endAddress] | endMask;

          // Handle the middle
          let address = address + 1;
          // NOTE: This does not include treatment of the endAddress
          while(address < endAddress){
            let screenMap[address] = color;
            let address = address + 1;
          }
          let startAddress = startAddress + 32;
          let endAddress = endAddress + 32;
          let address = startAddress;
          let counter = counter + 1;
        }
      }
      else {
        while(counter < repeat){
          let screenMap[startAddress] = screenMap[startAddress] & notStartMask;
          let screenMap[endAddress] = screenMap[endAddress] & notEndMask;

          // Handle the middle
          let address = address + 1;
          // NOTE: This does not include treatment of the endAddress
          while(address < endAddress){
            let screenMap[address] = color;
            let address = address + 1;
          }
          let startAddress = startAddress + 32;
          let endAddress = endAddress + 32;
          let address = startAddress;

          let counter = counter + 1;
        }
      }
    }
    return;
  }

  /**
   * Draw a vertical line.
   *
   * \param yStart The start of the line
   * \param yEnd The end of the line
   * \param x The x-coordinate
   */
  function void drawVerticalLine(int yStart, int yEnd, int x){
    var int y;

    // We start at the lowest y and move to the highest y
    let y = yStart;
    while(y < (yEnd+1)){
      do Screen.drawPixel(x, y);
      let y = y+1;
    }
    return;
  }


  /**
   * Draws a filled rectangle whose top left corner is (x1, y1)
   * and bottom right corner is (x2,y2), using the current color.
   *
   * NOTE: Having the row as first column is opposite of the matrix notation
   *
   * \param x1 The start column of the rectangle
   * \param y1 The start row of the rectangle
   * \param x2 The end column of the rectangle
   * \param y2 The end row of the rectangle
   */
  function void drawRectangle(int x1, int y1, int x2, int y2) {
    // Strategy: Draw straight horizontal lines
    var int xStart;
    var int xEnd;
    var int yStart;
    var int yEnd;

    if (x1<x2){
      let xStart = x1;
      let xEnd = x2;
    } else{
      let xStart = x2;
      let xEnd = x1;
    }

    if(y1<y2){
      let yStart = y1;
      let yEnd = y2;
    } else{
      let yStart = y2;
      let yEnd = y1;
    }

    // Draw several straight lines
    do Screen.drawHorizontalLine(xStart, xEnd, yStart, (yEnd - yStart)+1);

    return;
  }

  /**
   * Draw a filled circle of radius r<=181 around (x,y), using the current color.
   *
   * NOTE: Having the row as first column is opposite of the matrix notation
   *
   * \param x The column of centrum of the circle
   * \param y The row of centrum the circle
   * \param r The radius of the circle
   */
  function void drawCircle(int x, int y, int r) {
    var int curY;
    var int xStart;
    var int xEnd;
    var int rSquare;
    var int length;

    var int dy;

    if (r>181){
      let r = 181;
    }

    // NOTE: No handling of out of range
    let dy = -r;
    let rSquare = r*r;

    // +1 as we want to include r
    while(dy < (r+1)){
      let length = Math.sqrt(rSquare - (dy*dy));
      let xStart = x - length;
      let xEnd = x + length;

      let curY = y + dy;

      do Screen.drawHorizontalLine(xStart, xEnd, curY, 1);

      let dy = dy + 1;
    }

    return;
  }
}
