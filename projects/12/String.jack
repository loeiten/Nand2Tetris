// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
  field Array str;
  field int length;

  /**
   * Construct a new empty string.
   *
   * The initial length of the string will be 0
   *
   * \param maxLength Maximum length of the string
   * \return The current object
   */
  constructor String new(int maxLength) {
    if (maxLength = 0){
      let maxLength = 1;
    }
    let str = Array.new(maxLength);
    let length = 0;
    return this;
  }

  /** Dispose this string. */
  method void dispose() {
    do str.dispose();
    do Memory.deAlloc(this);
    return;
  }

  /**
   * Return the current length of this string.
   *
   * \return The current length of the string.
   */
  method int length() {
    return length;
  }

  /**
   * Return the character at the j-th location of this string.
   *
   * \param j The location to get the character at
   * \return The character value of the j-th character
   */
  method char charAt(int j) {
    return str[j];
  }

  /**
   * Set the character at the j-th location of this string to c.
   *
   * \param j The j-th location of this string
   * \param c The character value to set in the string
   */
  method void setCharAt(int j, char c) {
    let str[j] = c;
    return;
  }

  /**
   * Append c to this string's end and returns this string.
   *
   * \param c The string to append to the end
   * \return The string with c appended
   */
  method String appendChar(char c) {
    let str[length] = c;
    let length = length + 1;
    return this;
  }

  /** Erase the last character from this string. */
  method void eraseLastChar() {
    let str[length] = 0;
    let length = length - 1;
    return;
  }

  /**
   * Return the integer value of this string.
   *
   * It will process until a non-digit character is detected.
   *
   * \return The integer value
   */
  method int intValue() {
    var int val;
    var int d;
    var int i;
    var int c;
    var bool negate;

    let i = 0;
    let negate = false;

    let c = str[i];
    // Check if we are dealing with a negative number

    if(c = 45){
      let negate = true;
      let i = i + 1;
    }

    while(i < length){
      let c = str[i];
      // The characters which represents integers starts at 48 and ends at 57
      if ((c > 47) & (c < 59)){
        let d = c - 48;
        let val = (val*10) + d;
      }
      let i = i + 1;
    }

    if (negate){
      let val = -val;
    }

    return val;
  }

  /**
   * Set this string to hold a representation of the given value.
   *
   * \param val The value to represent
   */
  method void setInt(int val) {
    // We must reset the string length
    let length = 0;

    if(val < 0){
      // 45 is the value of minus
      do appendChar(45);
      let val = -val;
    }

    do setPositiveInt(val);

    return;
  }

  /**
   * Set a positive integer
   *
   * \param val The value to set
   */
  method void setPositiveInt(int val){
    var int lastDigit;
    var int c;

    // This is lastDigit = val % 10
    // Note val/10 is the truncated division
    let lastDigit = val - (10 * (val/10));
    // The characters which represents integers starts at 48 and ends at 57
    let c = lastDigit + 48;
    // val >= 10
    if(val > 11){
      do setPositiveInt(val/10);
    }
    do appendChar(c);

    return;
  }

  /**
   * Return the new line character.
   *
   * \return The new line character
   */
  function char newLine() {
    return 128;
  }

  /**
   * Return the backspace character.
   *
   * \return The backspace character
   */
  function char backSpace() {
    return 129;
  }

  /**
   * Return the double quote (") character.
   *
   * \return The double quote character
   */
  function char doubleQuote() {
    return 34;
  }
}
