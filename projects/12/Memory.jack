// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
  static Array ram;  // Access to the whole RAM
  static Array heap;
  static int heapBase;
  static int endListNextAddress;  // The next address of the last element in the list

  /** Initialize the class. */
  function void init() {
    let heapBase = 2048;
    // NOTE: We cannot call the Array constructor we need access to the whole RAM
    //       and the constructor would allocate space in the heap
    //       As Jack is weakly typed the below is an allowed thing to do
    let ram=0;
    // We use the same trick as above with the heap
    let heap = heapBase;  // Heap base

    let endListNextAddress = 2048;

    // Set the value of the address 2048 and 2049
    // Alternatively we could have poked the addresses these idices are pointing to
    let heap[0] = -1;  // The next (there is no next)
    let heap[1] = 14334;  // Length
    return;
  }

  /**
   * Returns the RAM value at the given address.
   *
   * \param address The address to peek at
   * \return The value at the peeked address
   */
  function int peek(int address) {
    return ram[address];
  }

  /**
   * Set the RAM value at the given address to the given value.
   *
   * \param address The address to poke
   * \param value The value to assign the address
   */
  function void poke(int address, int value) {
    let ram[address] = value;
    return;
  }

  /** Find an available RAM block.
   *
   * \param size size of the desired RAM block
   * \return A reference to the base address of the RAM block
   */
  function int alloc(int size) {
    var int requestedBlockSize;
    var int prevAddress;
    var int curAddress;
    var int nextAddress;
    var int size;
    var int carvedOutStartAddress;

    // Initialization
    let requestedBlockSize = size + 2;
    let prevAddress = -1;  // At the very start we do not have a previous address
    let curAddress = heapBase;
    let nextAddress = heap[0];
    let size = heap[1];

    // NOTE: The condition will be true if
    //       size == requestedBlockSize
    while(size < (requestedBlockSize - 1)){
      if (nextAddress = -1){
        // We are on the terminating end of the list, throw an error
        do Sys.error(137);
      }
      // Jump to the next heapBase block
      let prevAddress = curAddress;  // Store the previous address
      let curAddress = nextAddress;  // Update the current address
      let nextAddress = Memory.peek(curAddress);  // Look for the next address
      let size = Memory.peek(curAddress + 1);
    }

    if(size = requestedBlockSize){
      // The whole block is consumed
      let carvedOutStartAddress = curAddress;

      // We must let the previous "next" point at the next for this block
      do Memory.poke(prevAddress, curAddress);
    } else {
      // Only part of block is consumed, we must update size
      // Carve out from the end of the current heapBase block
      // NOTE: We add 2 to account for the overhead containing the next address and size of the current block
      let carvedOutStartAddress = (curAddress + 2) + size - requestedBlockSize;
      // Set the size
      do Memory.poke(carvedOutStartAddress + 1, size);

      // Update the available size in the non-carved out block
      do Memory.poke(curAddress + 1, size - requestedBlockSize);
    }

    // The carved out block will not have a next address, so we terminate the list with a -1
    do Memory.poke(carvedOutStartAddress, -1);

    // NOTE: +2 to account for the overhead
    return carvedOutStartAddress + 2;
  }

  /**
   * De-allocate the given object so that it's available for future allocations.
   *
   * /param object The object to de-allocate
   */
  function void deAlloc(Array object) {
    var int objectAddress;
    var int objectBaseAddress;

    // Get the address of the object (we can do this due to weak typing)
    let objectAddress = object;
    let objectBaseAddress = objectAddress - 2;  // One for "next", one for "size"

    // Let the last element of the heapBase point at this address
    do Memory.poke(endListNextAddress, objectBaseAddress);
    // Update the "next" pointer in the last block of heapBase
    let endListNextAddress = objectBaseAddress;

    // Since we are appending this block to the end of the heapBase,
    // it's "next" pointer must terminate
    do Memory.poke(objectBaseAddress, -1);

    return;
  }
}
