// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // First we build a way to select which register to store to IF load=1
    // We can use DMux8Way to do this
    // If load is 0, then no of the output pins are going to be 1
    // We feed the outputs of DMux8Way to each register
    DMux8Way(in=load, sel=address, a=l0, b=l1, c=l2, d=l3, e=l4, f=l5, g=l6, h=l7);
    Register(in=in, load=l0, out=out0);
    Register(in=in, load=l1, out=out1);
    Register(in=in, load=l2, out=out2);
    Register(in=in, load=l3, out=out3);
    Register(in=in, load=l4, out=out4);
    Register(in=in, load=l5, out=out5);
    Register(in=in, load=l6, out=out6);
    Register(in=in, load=l7, out=out7);
    // Next we need to find what register to emit the output from
    // We will always emit something, so we can use a Mux8Way
    Mux8Way16(a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, sel=address, out=out);
}
