// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Here we need to distinguish addresses, so for reference we have this table:
    //
    // Addresses:
    // Hexadecimal denotes the numbers with base 16, and starts with 0x
    // The following table shows the conversion between different bases and corresponding chip
    // Hexadecimal          Decimal         Binary[13..15]      Chip
    // 0x0000 - 0x3FFF      0     - 16383   000... - 011...     RAM
    // 0x4000 - 0x5FFF      16384 - 24574   100... - 101...     Screen
    // 0x6000 -             24575 -         110... -            Keyboard
    //
    // Note that all the RAM chips will always emit something each clock cycle
    // However, it's up to us to select what will be emitted in the output pins and
    // what the value of the load pins should be
    // We should obviously not set all load pins to 1 simply because the input load is 1

    // First we will check if the address is valid or not
    // The isInvalid pin will be 1 if the address is not valid
    // In this case all load pins must be set to 0 and the output is also 0
    And(a=address[13], b=address[14], out=keyboardBits);
    Or8Way(in=address[0..7], out=anyLow);
    Or8Way(in=address[5..12], out=anyMedium);
    Or(a=anyLow, b=anyMedium, out=anyLowOrMedium);
    And(a=keyboardBits, b=anyLowOrMedium, out=isInvalid);

    // Finding which bit to load:
    // Recall: index 0 denotes the least significant bit
    // Thus, if the most significant bit (the leftmost bit) is 0 we are operating on the RAM
    // Furthermore address >0x6000 is invalid
    // 0x6000 corresponds to the two most significant bits being 1, and the rest 0
    // We can use a DMux4Way on the most significant bits to find which pin to load
    DMux4Way(in=load, sel=address[13..14], a=loadRAMLow, b=loadRAMHigh, c=loadScreen, d=loadKeyboardTmp);
    // Two of the DMux out pins codes for RAM16K
    Or(a=loadRAMLow, b=loadRAMHigh, out=loadRAM);
    // Do not set the keyboard to load if we are using an invalid memory address
    Mux(a=loadKeyboardTmp, b=false, sel=isInvalid, out=loadKeyboard);

    // Wire up the different memory chips
    RAM16K(in=in, load=loadRAM, address=address[0..13], out=outRAM);
    // Note: Only 12 pins are needed to identify the screen address
    Screen(in=in, load=loadScreen, address=address[0..12], out=outScreen);
    // Note: Keyboard gets it input from the keyboard
    Keyboard(out=outKeyboard);

    // Finally we must set the final output pin
    Mux4Way16(a=outRAM, b=outRAM, c=outScreen, d=outKeyboard, sel=address[13..14], out=outTmp);
    // Output 0 if we have used an invalid memory address
    Mux16(a=outTmp, b=false, sel=isInvalid, out=out);
}
