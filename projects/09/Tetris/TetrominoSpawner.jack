/**
 * Implements the class for spawning tetrominos
 */

class TetrominoSpawner {

  /**
   * Spawn a I tetromino
   *
   * \warning The tetromino must be manually destroyed
   *
   * \param background The background to spawn the tetromino on
   * \param relativeYInd The y-index of the background mesh to spawn on
   * \param relativeXInd The x-index of the background mesh to spawn on
   */
  function Tetromino spawnI(Background background, int relativeYInd, int relativeXInd){
    // NOTE: The tetromino mesh is destroyed by the tetromino itself, so we will not destroy it here
    var Mesh tetrominoMesh;
    var Tetromino tetromino;
    let tetrominoMesh = Mesh.new(4, 4);
    do  tetrominoMesh.setState(1, 0, true);
    do  tetrominoMesh.setState(1, 1, true);
    do  tetrominoMesh.setState(1, 2, true);
    do  tetrominoMesh.setState(1, 3, true);
    // NOTE: We explicitly set the rest of the elements to false as the
    //       tetromino can be part of an array which have lingering memory
    do  tetrominoMesh.setState(0, 0, false);
    do  tetrominoMesh.setState(0, 1, false);
    do  tetrominoMesh.setState(0, 2, false);
    do  tetrominoMesh.setState(0, 3, false);
    do  tetrominoMesh.setState(2, 0, false);
    do  tetrominoMesh.setState(2, 1, false);
    do  tetrominoMesh.setState(2, 2, false);
    do  tetrominoMesh.setState(2, 3, false);
    do  tetrominoMesh.setState(3, 0, false);
    do  tetrominoMesh.setState(3, 1, false);
    do  tetrominoMesh.setState(3, 2, false);
    do  tetrominoMesh.setState(3, 3, false);

    let tetromino = Tetromino.new(tetrominoMesh,
                                  relativeYInd,  // y-coordinate in the backgroundMesh (first 20 rows are hidden, spawn at row 21 counted from bottom)
                                  relativeXInd,  // x-coordinate in the backgroundMesh (this is the center as we are counting from 0)
                                  background,  // Background
                                  0  // Type
                                 );

    return tetromino;
  }

  /**
   * Spawn a J tetromino
   *
   * \warning The tetromino must be manually destroyed
   *
   * \param background The background to spawn the tetromino on
   * \param relativeYInd The y-index of the background mesh to spawn on
   * \param relativeXInd The x-index of the background mesh to spawn on
   */
  function Tetromino spawnJ(Background background, int relativeYInd, int relativeXInd){
    // NOTE: The tetromino mesh is destroyed by the tetromino itself, so we will not destroy it here
    var Mesh tetrominoMesh;
    var Tetromino tetromino;
    let tetrominoMesh = Mesh.new(3, 3);
    do  tetrominoMesh.setState(0, 0, true);
    do  tetrominoMesh.setState(1, 0, true);
    do  tetrominoMesh.setState(1, 1, true);
    do  tetrominoMesh.setState(1, 2, true);
    // NOTE: We explicitly set the rest of the elements to false as the
    //       tetromino can be part of an array which have lingering memory
    do  tetrominoMesh.setState(0, 1, false);
    do  tetrominoMesh.setState(0, 2, false);
    do  tetrominoMesh.setState(2, 0, false);
    do  tetrominoMesh.setState(2, 1, false);
    do  tetrominoMesh.setState(2, 2, false);

    let tetromino = Tetromino.new(tetrominoMesh,
                                  relativeYInd,  // y-coordinate in the backgroundMesh (first 20 rows are hidden, spawn at row 21 counted from bottom)
                                  relativeXInd,  // x-coordinate in the backgroundMesh (this is the center as we are counting from 0)
                                  background, // Background
                                  1  // Type
                                 );

    return tetromino;
  }

  /**
   * Spawn a L tetromino
   *
   * \warning The tetromino must be manually destroyed
   *
   * \param background The background to spawn the tetromino on
   * \param relativeYInd The y-index of the background mesh to spawn on
   * \param relativeXInd The x-index of the background mesh to spawn on
   */
  function Tetromino spawnL(Background background, int relativeYInd, int relativeXInd){
    // NOTE: The tetromino mesh is destroyed by the tetromino itself, so we will not destroy it here
    var Mesh tetrominoMesh;
    var Tetromino tetromino;
    let tetrominoMesh = Mesh.new(3, 3);
    do  tetrominoMesh.setState(0, 2, true);
    do  tetrominoMesh.setState(1, 0, true);
    do  tetrominoMesh.setState(1, 1, true);
    do  tetrominoMesh.setState(1, 2, true);
    // NOTE: We explicitly set the rest of the elements to false as the
    //       tetromino can be part of an array which have lingering memory
    do  tetrominoMesh.setState(0, 0, false);
    do  tetrominoMesh.setState(0, 1, false);
    do  tetrominoMesh.setState(2, 0, false);
    do  tetrominoMesh.setState(2, 1, false);
    do  tetrominoMesh.setState(2, 2, false);

    let tetromino = Tetromino.new(tetrominoMesh,
                                  relativeYInd,  // y-coordinate in the backgroundMesh (first 20 rows are hidden, spawn at row 21 counted from bottom)
                                  relativeXInd,  // x-coordinate in the backgroundMesh (this is the center as we are counting from 0)
                                  background, // Background
                                  2  // Type
                                 );

    return tetromino;
  }

  /**
   * Spawn a O tetromino
   *
   * \warning The tetromino must be manually destroyed
   *
   * \param background The background to spawn the tetromino on
   * \param relativeYInd The y-index of the background mesh to spawn on
   * \param relativeXInd The x-index of the background mesh to spawn on
   */
  function Tetromino spawnO(Background background, int relativeYInd, int relativeXInd){
    // NOTE: The tetromino mesh is destroyed by the tetromino itself, so we will not destroy it here
    var Mesh tetrominoMesh;
    var Tetromino tetromino;
    let tetrominoMesh = Mesh.new(4, 4);
    do  tetrominoMesh.setState(1, 1, true);
    do  tetrominoMesh.setState(1, 2, true);
    do  tetrominoMesh.setState(2, 1, true);
    do  tetrominoMesh.setState(2, 2, true);
    // NOTE: We explicitly set the rest of the elements to false as the
    //       tetromino can be part of an array which have lingering memory
    do  tetrominoMesh.setState(0, 0, false);
    do  tetrominoMesh.setState(0, 1, false);
    do  tetrominoMesh.setState(0, 2, false);
    do  tetrominoMesh.setState(0, 3, false);
    do  tetrominoMesh.setState(1, 0, false);
    do  tetrominoMesh.setState(1, 3, false);
    do  tetrominoMesh.setState(2, 0, false);
    do  tetrominoMesh.setState(2, 3, false);
    do  tetrominoMesh.setState(3, 0, false);
    do  tetrominoMesh.setState(3, 1, false);
    do  tetrominoMesh.setState(3, 2, false);
    do  tetrominoMesh.setState(3, 3, false);

    let tetromino = Tetromino.new(tetrominoMesh,
                                  relativeYInd,  // y-coordinate in the backgroundMesh (first 20 rows are hidden, spawn at row 21 counted from bottom)
                                  relativeXInd,  // x-coordinate in the backgroundMesh (this is the center as we are counting from 0)
                                  background, // Background
                                  3  // Type
                                 );

    return tetromino;
  }

  /**
   * Spawn a S tetromino
   *
   * \warning The tetromino must be manually destroyed
   *
   * \param background The background to spawn the tetromino on
   * \param relativeYInd The y-index of the background mesh to spawn on
   * \param relativeXInd The x-index of the background mesh to spawn on
   */
  function Tetromino spawnS(Background background, int relativeYInd, int relativeXInd){
    // NOTE: The tetromino mesh is destroyed by the tetromino itself, so we will not destroy it here
    var Mesh tetrominoMesh;
    var Tetromino tetromino;
    let tetrominoMesh = Mesh.new(3, 3);
    do  tetrominoMesh.setState(0, 1, true);
    do  tetrominoMesh.setState(0, 2, true);
    do  tetrominoMesh.setState(1, 0, true);
    do  tetrominoMesh.setState(1, 1, true);
    // NOTE: We explicitly set the rest of the elements to false as the
    //       tetromino can be part of an array which have lingering memory
    do  tetrominoMesh.setState(0, 0, false);
    do  tetrominoMesh.setState(1, 2, false);
    do  tetrominoMesh.setState(2, 0, false);
    do  tetrominoMesh.setState(2, 1, false);
    do  tetrominoMesh.setState(2, 2, false);

    let tetromino = Tetromino.new(tetrominoMesh,
                                  relativeYInd,  // y-coordinate in the backgroundMesh (first 20 rows are hidden, spawn at row 21 counted from bottom)
                                  relativeXInd,  // x-coordinate in the backgroundMesh (this is the center as we are counting from 0)
                                  background, // Background
                                  4  // Type
                                 );

    return tetromino;
  }

  /**
   * Spawn a T tetromino
   *
   * \warning The tetromino must be manually destroyed
   *
   * \param background The background to spawn the tetromino on
   * \param relativeYInd The y-index of the background mesh to spawn on
   * \param relativeXInd The x-index of the background mesh to spawn on
   */
  function Tetromino spawnT(Background background, int relativeYInd, int relativeXInd){
    // NOTE: The tetromino mesh is destroyed by the tetromino itself, so we will not destroy it here
    var Mesh tetrominoMesh;
    var Tetromino tetromino;
    let tetrominoMesh = Mesh.new(3, 3);
    do  tetrominoMesh.setState(0, 1, true);
    do  tetrominoMesh.setState(1, 0, true);
    do  tetrominoMesh.setState(1, 1, true);
    do  tetrominoMesh.setState(1, 2, true);
    // NOTE: We explicitly set the rest of the elements to false as the
    //       tetromino can be part of an array which have lingering memory
    do  tetrominoMesh.setState(0, 0, false);
    do  tetrominoMesh.setState(0, 2, false);
    do  tetrominoMesh.setState(2, 0, false);
    do  tetrominoMesh.setState(2, 1, false);
    do  tetrominoMesh.setState(2, 2, false);

    let tetromino = Tetromino.new(tetrominoMesh,
                                  relativeYInd,  // y-coordinate in the backgroundMesh (first 20 rows are hidden, spawn at row 21 counted from bottom)
                                  relativeXInd,  // x-coordinate in the backgroundMesh (this is the center as we are counting from 0)
                                  background, // Background
                                  5  // Type
                                 );

    return tetromino;
  }

  /**
   * Spawn a Z tetromino
   *
   * \warning The tetromino must be manually destroyed
   *
   * \param background The background to spawn the tetromino on
   * \param relativeYInd The y-index of the background mesh to spawn on
   * \param relativeXInd The x-index of the background mesh to spawn on
   */
  function Tetromino spawnZ(Background background, int relativeYInd, int relativeXInd){
    // NOTE: The tetromino mesh is destroyed by the tetromino itself, so we will not destroy it here
    var Mesh tetrominoMesh;
    var Tetromino tetromino;
    let tetrominoMesh = Mesh.new(3, 3);
    do  tetrominoMesh.setState(0, 0, true);
    do  tetrominoMesh.setState(0, 1, true);
    do  tetrominoMesh.setState(1, 1, true);
    do  tetrominoMesh.setState(1, 2, true);
    // NOTE: We explicitly set the rest of the elements to false as the
    //       tetromino can be part of an array which have lingering memory
    do  tetrominoMesh.setState(0, 2, false);
    do  tetrominoMesh.setState(1, 0, false);
    do  tetrominoMesh.setState(2, 0, false);
    do  tetrominoMesh.setState(2, 1, false);
    do  tetrominoMesh.setState(2, 2, false);

    let tetromino = Tetromino.new(tetrominoMesh,
                                  relativeYInd,  // y-coordinate in the backgroundMesh (first 20 rows are hidden, spawn at row 21 counted from bottom)
                                  relativeXInd,  // x-coordinate in the backgroundMesh (this is the center as we are counting from 0)
                                  background, // Background
                                  6  // Type
                                 );

    return tetromino;
  }

}
