/**
  * Implements the NextTetrominos class.
  *
  * This class is responsible for
  * 1. Generating the 7-bags
  * 2. Returning the next tetromino
  * 3. Update the next display
  */

class NextTetrominos {
  field Background nextBackground; // The background for the next tetrominos
  field Background gameBackground_; // The background for the game
  field Mesh nextMesh;  // The mesh containing the next tetrominos
  field Array currentBag;  // The current 7-bag of next tetrominos
  field Array nextBag;  // The next 7-bag of next tetrominos
  field Array numberBag;  // Bag of numbers representing the tetromino types
  field String nextString;  // String holding "Next"
  field int curBagIteration;  // The current bag iteration
  field int bagSize;  // The bag size

  /**
   * Construct the NextTetrominos object.
   *
   * \param gameBackground The background for the game
   */
  constructor NextTetrominos new(Background gameBackground) {

    let gameBackground_ = gameBackground;
    // Create the next background
    // FIXME: Do proper calculations and put it to readme
    // Subtract 1 from frameStartY, and added to frameLenY
    let nextBackground = Background.new(
      347, // frameStartX  // 155 + 122 + 70
      22,   // frameStartY
      56, // frameLenX + 2 + 2
      222, // frameLenY (209 + 1 for next line + 1 for frame line)
      7,  // tetrominoElementSize
      0,  // skipRows
      6,  // meshCols
      24   // meshRows
    );
    let nextMesh = nextBackground.getBackgroundMesh();

    // Set size and iteration
    let bagSize = 7;
    // We set the iteration to 1 so that it can be reset when iteration = bagSize
    let curBagIteration = 1;

    // Construct the bags
    let currentBag = Array.new(bagSize);
    let nextBag = Array.new(bagSize);
    let numberBag = Array.new(bagSize);
    do generateBag(currentBag);
    do generateBag(nextBag);

    // Display
    do nextBackground.drawFrame();
    let nextString = "Next";
    do Output.moveCursor(1, 45);
    do Output.printString(nextString);
    do updateNextColumn();

    return this;
  }

  /** dispose this nextTetrominos object. */
  method void dispose(){
    do nextBackground.dispose();
    do currentBag.dispose();
    do nextBag.dispose();
    do numberBag.dispose();
    // NOTE: We dispose the strings in the destructor
    //       Destroying elsewhere appears to mess with field int initialization
    do nextString.dispose();
    do Memory.deAlloc(this);
    return;
  }

  /**
   * Get the next tetromino
   *
   * \warning The returned tetromino must be manually destroyed
   *
   * \return The next tetromino
   */
  method Tetromino getNextTetrominos(){
    var Tetromino curTetromino;
    var Mesh curTetrominoMesh;
    var int counter;

    let curTetromino = currentBag[0];

    // Advance all tetrominos in the current bag with one position
    // NOTE: bagSize-1 as we are accessing counter + 1
    while(counter < (bagSize - 1)){
      let currentBag[counter] = currentBag[counter + 1];
      let counter = counter + 1;
    }
    // Manually move over the first tetromino from the next bag to the current bag
    // NOTE: -1 as we start to count from 0
    let currentBag[bagSize - 1] = nextBag[0];
    // Reset the counter
    let counter = 0;
    // Advance all tetrominos in the current bag with one position
    // NOTE: bagSize-1 as we are accessing counter + 1
    while(counter < (bagSize - 1)){
      let nextBag[counter] = nextBag[counter + 1];
      let counter = counter + 1;
    }

    if(curBagIteration = bagSize){
      do generateBag(nextBag);
      // Reset curBagIteration
      let curBagIteration = 1;
    } else {
      // Update the curBagIteration
      let curBagIteration = curBagIteration + 1;
    }

    // Update and draw the next column
    do updateNextColumn();

    // Update the tetromino
    do curTetromino.setBackground(gameBackground_);
    let curTetrominoMesh = curTetromino.getTetrominoMesh();
    if (curTetrominoMesh.getMeshLength() = 16){
      // 4x4 tetrominos
      do curTetromino.setRelativePosition(19, 3);
    } else {
      // 3x3 tetrominos
      do curTetromino.setRelativePosition(18, 3);
    }

    return curTetromino;
  }

  method void fillNumberBag(){
    var int counter;
    var int randNumber;
    var int curHigh;
    var int curLow;

    // // FIXME:
    // var bool inArray;
    // do Output.moveCursor(0, 0);
    // do Output.printString("Start");

    // Initialize all members to -1
    while(counter < bagSize){
      let numberBag[counter] = -1;
      let counter = counter + 1;
    }

    // // FIXME:
    // do Output.moveCursor(1, 0);
    // do Output.printString("After minus 1");

    // Reset the counter
    let counter = 0;
    let randNumber = -1;
    let curHigh = bagSize - 1;
    let curLow = 0;
    while(counter < bagSize){

    // // FIXME:
    // do Output.moveCursor(2, 0);
    // do Output.printString("Before inArray");
    //  let inArray = Algorithm.intInArray(randNumber, numberBag, bagSize);
    // do Output.moveCursor(3, 0);
    // do Output.printString("inArray: ");
    // do Output.printInt(inArray);

      while(Algorithm.intInArray(randNumber, numberBag, bagSize)){
    // // FIXME:
    // do Output.moveCursor(4, 0);
    // do Output.printString("Before randNumber");
        // Update the random number
        let randNumber = LCGRandom.randRange(curLow, curHigh);
    // // FIXME:
    //   let inArray = Algorithm.intInArray(randNumber, numberBag, bagSize);
    // do Output.moveCursor(3, 0);
    // do Output.printString("After randNumber");
      }
      // Reduce the range if we've hit the extremes of the range
      if(randNumber = curHigh){
        let curHigh = curHigh - 1;
      }
      if(randNumber = curLow){
        let curLow = curLow + 1;
      }
      let numberBag[counter] = randNumber;
      let counter = counter + 1;
    }

    return;
  }

  // FIXME: delme
  method Array getNumberBag(){
    return numberBag;
  }

  /**
   * Generate a bag of tetrominos
   *
   * \param bag The bag where the tetrominos are to be put in
   */
  method void generateBag(Array bag){
    var int counter;
    var int curTetrominoType;

    do fillNumberBag();

    while(counter < bagSize){
      let curTetrominoType = numberBag[counter];
      // NOTE: The relative x and y indices will be updated in updateNextColumn,
      //       so we might as well set them to 0 here
      if(curTetrominoType = 0){ let bag[counter] = TetrominoSpawner.spawnI(nextMesh, 0, 0); }
      if(curTetrominoType = 1){ let bag[counter] = TetrominoSpawner.spawnJ(nextMesh, 0, 0); }
      if(curTetrominoType = 2){ let bag[counter] = TetrominoSpawner.spawnL(nextMesh, 0, 0); }
      if(curTetrominoType = 3){ let bag[counter] = TetrominoSpawner.spawnO(nextMesh, 0, 0); }
      if(curTetrominoType = 4){ let bag[counter] = TetrominoSpawner.spawnS(nextMesh, 0, 0); }
      if(curTetrominoType = 5){ let bag[counter] = TetrominoSpawner.spawnT(nextMesh, 0, 0); }
      if(curTetrominoType = 6){ let bag[counter] = TetrominoSpawner.spawnZ(nextMesh, 0, 0); }

      let counter = counter + 1;
    }

    return;
  }
//
  /** Update and draw the next column */
  method void updateNextColumn(){
    var Tetromino curTetromino;
    var Mesh tetrominoMesh;

    var int counter;
    var int newRelativeYInd;
    var int tetrominoType;
    var int cellSpace;  // Allocate 4 elements to each cell
    var int padFirstTetromino;  // Pad if the first tetromino is 3x3
    var int padOTetromino;  // Pad the tetromino if count != 0 and name = O

    let cellSpace = 4;

    let curTetromino = currentBag[counter];
    let tetrominoMesh = curTetromino.getTetrominoMesh();

    // Clear the mesh
    do nextMesh.clearMesh();

    if(tetrominoMesh.getMeshLength() = 9){
      // Pad with one cell if the first tetromino is a 3x3 tetromino
      let padFirstTetromino = 1;
    } else {
      let padFirstTetromino = 0;
    }

    // NOTE: We only want to show the next tetrominos for bagSize - 1
    while (counter < (bagSize - 1)){
      let curTetromino = currentBag[counter];

      if(counter > 0){
        let tetrominoType = curTetromino.getTetrominoType();
        // In case we are dealing with a O tetromino:
        // We will negatively pad with one cell to align with the other tetrominos
        if(tetrominoType = 3){
          let padOTetromino = 1;
        } else {
          let padOTetromino = 0;
        }
      }

      // Update the location of the current bags
      let newRelativeYInd = (counter * cellSpace) + padFirstTetromino - padOTetromino;
      let tetrominoMesh = curTetromino.getTetrominoMesh();
      do curTetromino.setRelativePosition(newRelativeYInd, 1);
      do nextMesh.addTetrominoToMesh(curTetromino);

      let counter = counter + 1;
    }

    // Draw the background
    // Remove remaining tetrominos
    do nextBackground.drawMesh(true, true, nextMesh, 0, 0);
    // Draw the background
    do nextBackground.drawMesh(false, false, nextMesh, 0, 0);

    return;
  }

}
