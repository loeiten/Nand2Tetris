/**
 * Implements the Mesh class
 */

/**
 * Class representing a mesh or a grid where elements have either state 0 or 1
 */
class Mesh {
  field int cols_;  // Number of cols_ in the Mesh
  field int rows_;  // Number of rows_ in the Mesh
  field int meshLength;  // Total number of elements in the Mesh

  field Array meshArray;  // Array holding the state of each element
  field Array coordinates;  // Array holding the coordinates

  static int allocs;  // Number of times this has been allocated

  /**
   * Construct the mesh
   *
   * \param cols Number of columns in the Mesh
   * \param rows Number of rows_ in the Mesh
   */
  constructor Mesh new(int cols, int rows) {
    let cols_ = cols;
    let rows_ = rows;
    let meshLength = cols_ * rows_;

    let meshArray = Array.new(meshLength);
    let coordinates = Array.new(2);

    let allocs = allocs + 1;

    return this;
  }

  /**
   * Destroy the Mesh
   *
   * Disposes:
   * - The meshArray
   * - The coordinates
   * - This
   */
  method void dispose (){
    let allocs = allocs - 1;
    do meshArray.dispose();
    do coordinates.dispose();
    do Memory.deAlloc(this);
    return;
  }

  /** Print the number of allocs */
  method void printAlloc (){
    var String str;
    let str = "Mesh allocs: ";
    do Output.printString(str);
    do Output.printInt(allocs);
    do str.dispose();
    return;
  }

  /**
   * Return the state at given x and y coordinates
   *
   * \param yInd The y coordinate of the Mesh
   * \param xInd The x coordinate of the Mesh
   * \return The state at the given x and y coordinates
   */
  method bool getState(int yInd, int xInd){
    var int index;
    var bool state;

    let index = getMeshArrayIndex(yInd, xInd);
    let state = meshArray[index];

    return state;
  }

  /**
   * Set the state at given x and y coordinates
   *
   * \param yInd The y coordinate of the Mesh
   * \param xInd The x coordinate of the Mesh
   * \param state The state to set
   */
  method void setState(int yInd, int xInd, bool state){
    var int index;

    let index = getMeshArrayIndex(yInd, xInd);
    let meshArray[index] = state;
    return;
  }

  /**
   * Translates a set of x and y coordinates into an index
   *
   * \param yInd The y coordinate of the Mesh
   * \param xInd The x coordinate of the Mesh
   * \return The corresponding index
   */
  method int getMeshArrayIndex(int yInd, int xInd){
    return xInd + (yInd*cols_);
  }

  /**
   * Translates an index to a set of x and y coordinates
   *
   * \param index The index to translate to x and y coordinates
   * \return An array where:
   *  - The first index is the x coordinate of the Mesh
   *  - The second index is the y coordinate of the Mesh
   */
  method Array getMeshIndices(int index){
    // x-index (modulus operator)
    let coordinates[0] = Algorithm.mod(index, cols_);

    // y-index (integer division)
    let coordinates[1] = index/cols_;

    return coordinates;
  }

  /** Return the total number of elements in the Mesh */
  method int getMeshLength(){
    return meshLength;
  }

  /** Return the number columns in the mesh */
  method int getCols(){
    return cols_;
  }

  /** Return the number rows_ in the mesh */
  method int getRows(){
    return rows_;
  }

  /** Clear the current mesh */
  method void clearMesh(){
    var Array meshIndices;
    var int index;
    while(index < meshLength){
      let meshIndices = getMeshIndices(index);
      do setState(meshIndices[1], meshIndices[0], false);
      let index = index + 1;
    }

    return;
  }

  /**
   * Add a tetromino to the mesh
   *
   * \param tetromino The tetromino to add to the mesh
   */
  method void addTetrominoToMesh(Tetromino tetromino){
    var int xInd;  // x-coordinate in the gameMesh
    var int yInd;  // y-coordinate in the gameMesh
    var int tetrominoIndex;  // Index in the tetromino mesh

    var int tetrominoMeshLength;  // Length of the tetromino mesh
    var Array tetrominoIndexArray;  // The array for the tetromino coordinates
    var Mesh tetrominoMesh;  // The tetromino mesh

    let tetrominoMesh = tetromino.getTetrominoMesh();
    let tetrominoMeshLength = tetrominoMesh.getMeshLength();

    // FIXME:
    // do Output.moveCursor(0, 0);
    // do Output.printString("tetrominoType: ");
    // do Output.printInt(tetromino.getTetrominoType());
    // do Output.moveCursor(1, 0);
    // do Output.printString("tetrominoIndex");
    // do Output.moveCursor(3, 0);
    // do Output.printString("tetrominoMeshLength: ");
    // do Output.printInt(tetrominoMeshLength);
    // do Output.moveCursor(4, 0);
    // do Output.printString("xInd: ");
    // do Output.moveCursor(5, 0);
    // do Output.printString("     ");
    // do Output.moveCursor(6, 0);
    // do Output.printString("yInd: ");
    // do Output.moveCursor(7, 0);
    // do Output.printString("     ");

    // Add tetromino to the game mesh
    let tetrominoIndex = 0;
    while(tetrominoIndex < tetrominoMeshLength){
      let tetrominoIndexArray = tetrominoMesh.getMeshIndices(tetrominoIndex);
      let xInd = tetromino.getRelativeIndX() + tetrominoIndexArray[0];
      let yInd = tetromino.getRelativeIndY() + tetrominoIndexArray[1];
    // // FIXME:3s
    // do Output.moveCursor(2, 0);
    // do Output.printInt(tetrominoIndex);
    // do Output.moveCursor(5, 0);
    // do Output.printInt(xInd);
    // do Output.moveCursor(7, 0);
    // do Output.printInt(yInd);
    // do Sys.wait(500);
      if(tetrominoMesh.getState(tetrominoIndexArray[1], tetrominoIndexArray[0])){
        do setState(yInd, xInd, true);
      }
      let tetrominoIndex = tetrominoIndex + 1;
    }

    // do Output.moveCursor(0, 0);
    // do Output.printString("Bye!");
    // do Output.moveCursor(2, 0);
    // do Output.printString("Bye!");
    // do Sys.wait(500);

    return;
  }

}
