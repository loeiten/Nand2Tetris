/**
 * Implements the Tetromino class
 */

/**
 * Class which deals with the tetrominos in the following way
 * - Movement (side-ways, down, rotate)
 * - Checks if it can be placed in another mesh without colliding with elements
 *   or be out of bounds
 * - Draw and erase the tetromino within another mesh
 */
class Tetromino {
  field int relativeXInd_;  // x-coordinate in the background mesh (i.e. not the tetromino mesh coordinate) relative to top left corner of relativeMesh
  field int relativeYInd_;  // y-coordinate in the background mesh (i.e. not the tetromino mesh coordinate) relative to top left corner of relativeMesh

  field Mesh tetrominoMesh_;  // The mesh of the tetromino itself
  field Background background_;  // The background to interact with

  field int tetrominoType;  // Type of the tetromino

  static int allocs;  // Number of times this has been allocated

  /**
   * Construct the tetromino
   *
   * \param tetrominoMesh The mesh of the tetromino itself
   * \param relativeYInd y-coordinate in the background mesh (i.e. not the tetromino mesh coordinate) relative to top left corner of relativeMesh
   * \param relativeXInd x-coordinate in the background mesh (i.e. not the tetromino mesh coordinate) relative to top left corner of relativeMesh
   * \param background The background to interact with
   * \param int The type of tetromino (0-I, 1-J, 2-L, 3-O, 4-S, 5-T, 6-Z)
   */
  constructor Tetromino new(Mesh tetrominoMesh,
                            int relativeYInd,
                            int relativeXInd,
                            Background background,
                            int type) {
    let tetrominoMesh_ = tetrominoMesh;

    let relativeXInd_ = relativeXInd;
    let relativeYInd_ = relativeYInd;

    let background_ = background;

    let tetrominoType = type;

    let allocs = allocs + 1;

    return this;
  }

  /**
   * Destroy the Tetromino
   *
   * Disposes:
   * - The tetrominoMesh
   * - This
   */
  method void dispose (){
    let allocs = allocs - 1;

    do tetrominoMesh_.dispose();
    do Memory.deAlloc(this);
    return;
  }

  /** Print the number of allocs */
  method void printAlloc (){
    var String str;
    let str = "Tetromino allocs: ";
    do Output.printString(str);
    do Output.printInt(allocs);
    do str.dispose();
    return;
  }

  /** Return the tetrominoMesh_ */
  method int getTetrominoMesh(){
    return tetrominoMesh_;
  }

  /** Return relativeXInd_ */
  method int getRelativeIndX(){
    return relativeXInd_;
  }

  /** Return relativeYInd_ */
  method int getRelativeIndY(){
    return relativeYInd_;
  }
  /**
   * Return the tetromino type
   *
   * 0-I, 1-J, 2-L, 3-O, 4-S, 5-T, 6-Z
   */
  method int getTetrominoType(){
    return tetrominoType;
  }

  /**
   * Set the background
   *
   * \param background The new background
   */
  method void setBackground(Background background){
    let background_ = background;
    return;
  }

  /**
   * Set the relative position
   *
   * \param yInd The relative y index
   * \param xInd The relative x index
   */
  method void setRelativePosition(int yInd, int xInd){
    let relativeYInd_ = yInd;
    let relativeXInd_ = xInd;
    return;
  }

  /**
   * Rotate the tetromino clockwise
   */
  method void rotate(){
    return;
  }

  /**
   * Return true if it's possible to spawn the tetromino in the backgroundMesh
   *
   * \return true if it's possible to spawn the tetromino
   */
  method bool canSpawn(){
    var bool canBeSpawn;

    let canBeSpawn = canBePlaced(relativeYInd_, relativeXInd_);

    if(canBeSpawn){
      do background_.drawMesh(false, false, tetrominoMesh_, relativeYInd_, relativeXInd_);
      return true;
    } else{
      return false;
    }
  }

  /**
   * Return true if it's possible to place the tetromino with the new coordinates in the backgroundMesh
   *
   * \param newRelativeYInd The new y-coordinate in the backgroundMesh
   * \param newRelativeXInd The new x-coordinate in the backgroundMesh
   * \return true if it's possible to place the tetromino
   */
  method bool canBePlaced(int newRelativeYInd, int newRelativeXInd){
    var int tetrominoMeshIndex;
    var int tetrominoXIndex;
    var int tetrominoYIndex;
    var int backgroundXInd;
    var int backgroundYInd;

    var Array tetrominoIndices;  // Will be destroyed by the Mesh
    var Mesh backgroundMesh;

    let backgroundMesh = background_.getBackgroundMesh();

    while(tetrominoMeshIndex < tetrominoMesh_.getMeshLength()){
      let tetrominoIndices = tetrominoMesh_.getMeshIndices(tetrominoMeshIndex);
      let tetrominoXIndex = tetrominoIndices[0];
      let tetrominoYIndex = tetrominoIndices[1];

      let backgroundXInd = newRelativeXInd + tetrominoXIndex;
      let backgroundYInd = newRelativeYInd + tetrominoYIndex;

      if(tetrominoMesh_.getState(tetrominoYIndex, tetrominoXIndex)){
        // Check that x is within limits
        if (backgroundXInd < 0){ return false; }
        // -1 as backgroundXInd counts from 0
        if (backgroundXInd > (backgroundMesh.getCols() - 1)){ return false; }

        // Check that y is within limits
        if (backgroundYInd < 0){ return false; }
        // -1 as backgroundYInd counts from 0
        if (backgroundYInd > (backgroundMesh.getRows() - 1)){ return false; }

        // Check whether we would collide
        if (backgroundMesh.getState(backgroundYInd, backgroundXInd)){ return false; }
      }

      let tetrominoMeshIndex = tetrominoMeshIndex + 1;
    }

    return true;
  }

  /**
   * Return true if it's possible to move the tetromino down in the backgroundMesh
   *
   * \return true if it's possible to move the tetromino down
   */
  method bool canMoveDown(){
    var int newRelativeYInd;
    var bool canPlace;

    let newRelativeYInd = relativeYInd_ + 1;
    let canPlace = canBePlaced(newRelativeYInd, relativeXInd_);

    return canPlace;
  }

  /**
   * Return true if it's possible to move the tetromino to the left in the backgroundMesh
   *
   * \return true if it's possible to move the tetromino to the left
   */
  method bool canMoveLeft(){
    var int newRelativeXInd;
    var bool canPlace;

    let newRelativeXInd = relativeXInd_ - 1;
    let canPlace = canBePlaced(relativeYInd_, newRelativeXInd);
    return canPlace;
  }

  /**
   * Return true if it's possible to move the tetromino to the right in the backgroundMesh
   *
   * \return true if it's possible to move the tetromino to the right
   */
  method bool canMoveRight(){
    var int newRelativeXInd;
    var bool canPlace;

    let newRelativeXInd = relativeXInd_ + 1;
    let canPlace = canBePlaced(relativeYInd_, newRelativeXInd);
    return canPlace;
  }

  /** Move the tetromino down in the background mesh */
  method void moveDown(){
    // Erase the previous position
    do background_.drawMesh(true, false, tetrominoMesh_, relativeYInd_, relativeXInd_);
    let relativeYInd_ = relativeYInd_ + 1;
    // Draw
    do background_.drawMesh(false, false, tetrominoMesh_, relativeYInd_, relativeXInd_);
    return;
  }

  /** Move the tetromino to the left in the background mesh */
  method void moveLeft(){
    // Erase the previous position
    do background_.drawMesh(true, false, tetrominoMesh_, relativeYInd_, relativeXInd_);
    let relativeXInd_ = relativeXInd_ - 1;
    // Draw
    do background_.drawMesh(false, false, tetrominoMesh_, relativeYInd_, relativeXInd_);
    return;
  }

  /** Move the tetromino to the right in the background mesh */
  method void moveRight(){
    // Erase the previous position
    do background_.drawMesh(true, false, tetrominoMesh_, relativeYInd_, relativeXInd_);
    let relativeXInd_ = relativeXInd_ + 1;
    // Draw
    do background_.drawMesh(false, false, tetrominoMesh_, relativeYInd_, relativeXInd_);
    return;
  }

}
