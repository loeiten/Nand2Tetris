/**
 * Implements the Tetromino class
 */

/**
 * Class which deals with the tetrominos in the following way
 * - Movement (side-ways, down, rotate)
 * - Checks if it can be placed in another mesh without colliding with elements
 *   or be out of bounds
 * - Draw and erase the tetromino within another mesh
 */
class Tetromino {
  field int relativeMeshX;  // x-coordinate in a different mesh (i.e. not the tetromino mesh coordinate) relative to top left corner of relativeMesh
  field int relativeMeshY;  // y-coordinate in a different mesh (i.e. not the tetromino mesh coordinate) relative to top left corner of relativeMesh
  field int tetrominoElementSize;  // Size of a tetromino element
  field int frameStartX;  // The pixel column for the start of the background
  field int frameStartY;  // The pixel row for the start of the background

  field Mesh tetrominoMesh;  // The mesh of the tetromino itself

  /**
   * Construct the tetromino
   *
   * \param tetrominoMesh_ The mesh of the tetromino itself
   * \param relativeMeshX_ x-coordinate in a different mesh (i.e. not the tetromino mesh coordinate) relative to top left corner of relativeMesh
   * \param relativeMeshY_ y-coordinate in a different mesh (i.e. not the tetromino mesh coordinate) relative to top left corner of relativeMesh
   * \param tetrominoElementSize_ Size of a tetromino element
   * \param frameStartX_ The pixel column for the start of the background
   * \param frameStartY_ The pixel row for the start of the background
   */
  constructor Tetromino new(Mesh tetrominoMesh_,
                            int relativeMeshX_,
                            int relativeMeshY_,
                            int tetrominoElementSize_,
                            int frameStartX_,
                            int frameStartY_) {
    let tetrominoMesh = tetrominoMesh_;

    let relativeMeshX = relativeMeshX_;
    let relativeMeshY = relativeMeshY_;
    let tetrominoElementSize = tetrominoElementSize_;
    let frameStartX = frameStartX_;
    let frameStartY = frameStartY_;

    return this;
  }

  /**
   * Destroy the Tetromino
   *
   * Disposes:
   * - The tetrominoMesh
   * - This
   */
  method void dispose (){
    do tetrominoMesh.dispose();
    do Memory.deAlloc(this);
    return;
  }

  /**
   * Rotate the tetromino clockwise
   */
  method void rotate(){
    return;
  }

  /**
   * Return true if it's possible to spawn the tetromino in the gameMesh
   *
   * \param gameMesh The gameMesh
   * \return true if it's possible to spawn the tetromino
   */
  method bool canSpawn(Mesh gameMesh){
    var bool canBeSpawn;

    let canBeSpawn = canBePlaced(gameMesh, relativeMeshX, relativeMeshY);

    if(canBeSpawn){
      do draw();
      return true;
    } else{
      return false;
    }
  }

  /**
   * Return true if it's possible to place the tetromino with the new coordinates in the gameMesh
   *
   * \param gameMesh The gameMesh
   * \param newRelativeMeshX The new x-coordinate in the gameMesh
   * \param newRelativeMeshY The new y-coordinate in the gameMesh
   * \return true if it's possible to place the tetromino
   */
  method bool canBePlaced(Mesh gameMesh, int newRelativeMeshX, int newRelativeMeshY){
    var int tetrominoMeshIndex;
    var int tetrominoXIndex;
    var int tetrominoYIndex;
    var int gameXInd;
    var int gameYInd;

    var Array tetrominoIndices;  // Will be destroyed by the tetromino

    while(tetrominoMeshIndex < tetrominoMesh.getMeshLenght()){
      let tetrominoIndices = tetrominoMesh.getMeshIndices(tetrominoMeshIndex);
      let tetrominoXIndex = tetrominoIndices[0];
      let tetrominoYIndex = tetrominoIndices[1];

      let gameXInd = newRelativeMeshX + tetrominoXIndex;
      let gameYInd = newRelativeMeshY + tetrominoYIndex;

      // Check that x is within limits
      if (gameXInd < 0){ return false; }
      // -1 as gameXInd counts from 0
      if (gameXInd > (gameMesh.getCols() - 1)){ return false; }

      // Check that y is within limits
      if (gameYInd < 0){ return false; }
      // -1 as gameYInd counts from 0
      if (gameYInd > (gameMesh.getRows() - 1)){ return false; }

      // Check whether we would collide
      if (gameMesh.getState(gameXInd, gameYInd)){ return false; }
      let tetrominoMeshIndex = tetrominoMeshIndex + 1;
    }

    return true;
  }

  /**
   * Return true if it's possible to move the tetromino down in the gameMesh
   *
   * \param gameMesh The gameMesh
   * \return true if it's possible to move the tetromino down
   */
  method bool canMoveDown(Mesh gameMesh){
    var int newRelativeMeshY;
    var bool canPlace;

    let newRelativeMeshY = relativeMeshY + 1;
    let canPlace = canBePlaced(gameMesh, relativeMeshX, newRelativeMeshY);

    return canPlace;
  }

  /**
   * Return true if it's possible to move the tetromino to the left in the gameMesh
   *
   * \param gameMesh The gameMesh
   * \return true if it's possible to move the tetromino to the left
   */
  method bool canMoveLeft(Mesh gameMesh){
    var int newRelativeMeshX;
    var bool canPlace;

    let newRelativeMeshX = relativeMeshX - 1;
    let canPlace = canBePlaced(gameMesh, newRelativeMeshX, relativeMeshY);
    return canPlace;
  }

  /**
   * Return true if it's possible to move the tetromino to the right in the gameMesh
   *
   * \param gameMesh The gameMesh
   * \return true if it's possible to move the tetromino to the right
   */
  method bool canMoveRight(Mesh gameMesh){
    var int newRelativeMeshX;
    var bool canPlace;

    let newRelativeMeshX = relativeMeshX + 1;
    let canPlace = canBePlaced(gameMesh, newRelativeMeshX, relativeMeshY);
    return canPlace;
  }

  /** Move the tetromino down in the gameMesh */
  method void moveDown(){
    do erase();
    let relativeMeshY = relativeMeshY + 1;
    do draw();
    return;
  }

  /** Move the tetromino to the left in the gameMesh */
  method void moveLeft(){
    do erase();
    let relativeMeshX = relativeMeshX - 1;
    do draw();
    return;
  }

  /** Move the tetromino to the right in the gameMesh */
  method void moveRight(){
    do erase();
    let relativeMeshX = relativeMeshX + 1;
    do draw();
    return;
  }

  /** Return the tetrominoMesh */
  method int getTetrominoMesh(){
    return tetrominoMesh;
  }

  /** Return relativeMeshX */
  method int getRelativeMeshX(){
    return relativeMeshX;
  }

  /** Return relativeMeshY */
  method int getRelativeMeshY(){
    return relativeMeshY;
  }

  /** Draw the tetromino in the gameMesh */
  method void draw(){
    var int index;  // Index representing the tetromino element
    var int xInd;  // The x coordinate of either the tetrominoMesh or the gameMesh
    var int yInd;  // The y coordinate of either the tetrominoMesh or the gameMesh
    var int xStartPixel;  // The pixel column to start draw a rectangle from
    var int yStartPixel;  // The pixel row to start draw a rectangle from

    var bool state;  // State of the current tetromino element

    // Will be destroyed by the tetromino
    var Array indices;  // Array holding the (x, y) coordinate of the Mesh

    let index = 0;
    while (index < tetrominoMesh.getMeshLenght()){
      // Reference system is tetromino
      let indices = tetrominoMesh.getMeshIndices(index);
      let xInd = indices[0];
      let yInd = indices[1];
      let state = tetrominoMesh.getState(xInd, yInd);

      // Reference system is relativeMesh
      let xInd = relativeMeshX + indices[0];
      // Subtract 20 from relativeMesh as the play field is 10x40 with only 10x20 showing
      let yInd = relativeMeshY - 20 + indices[1];

      // Only draw if termino is within the frame
      if(yInd > -1){
        let xStartPixel = frameStartX + (tetrominoElementSize*xInd) + (2*xInd);
        let yStartPixel = frameStartY + (tetrominoElementSize*yInd) + (2*yInd);

        do Screen.setColor(state);
        do Screen.drawRectangle(xStartPixel, yStartPixel, xStartPixel+tetrominoElementSize, yStartPixel+tetrominoElementSize);
      }
      let index = index + 1;
    }
    return;
  }

  /** Erase the tetromino in the gameMesh */
  method void erase(){
    var int index;  // Index representing the tetromino element
    var int xInd;  // The x coordinate of either the tetrominoMesh or the gameMesh
    var int yInd;  // The y coordinate of either the tetrominoMesh or the gameMesh
    var int xStartPixel;  // The pixel column to start draw a rectangle from
    var int yStartPixel;  // The pixel row to start draw a rectangle from

    var bool state;  // State of the current tetromino element

    // Will be destroyed by the tetromino
    var Array indices;  // Array holding the (x, y) coordinate of the Mesh

    let index = 0;
    while (index < tetrominoMesh.getMeshLenght()){
      // Reference system is relativeMesh
      let indices = tetrominoMesh.getMeshIndices(index);
      let xInd = relativeMeshX + indices[0];
      // Subtract 20 from relativeMesh as the play field is 10x40 with only 10x20 showing
      let yInd = relativeMeshY - 20 + indices[1];

      // Only erase if termino is within the frame
      if(yInd > -1){
        let xStartPixel = frameStartX + (tetrominoElementSize*xInd) + (2*xInd);
        let yStartPixel = frameStartY + (tetrominoElementSize*yInd) + (2*yInd);

        do Screen.setColor(false);
        do Screen.drawRectangle(xStartPixel, yStartPixel, xStartPixel+tetrominoElementSize, yStartPixel+tetrominoElementSize);
      }

      let index = index + 1;
    }
    return;
  }

}
