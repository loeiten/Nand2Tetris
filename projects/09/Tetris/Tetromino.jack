/**
 * Implements the Tetromino class
 */

/**
 * Class which deals with the tetrominos in the following way
 * - Movement (side-ways, down, rotate)
 * - Checks if it can be placed in another mesh without colliding with elements
 *   or be out of bounds
 * - Draw and erase the tetromino within another mesh
 */
class Tetromino {
  field int relativeXInd;  // x-coordinate in the background mesh (i.e. not the tetromino mesh coordinate) relative to top left corner of relativeMesh
  field int relativeYInd;  // y-coordinate in the background mesh (i.e. not the tetromino mesh coordinate) relative to top left corner of relativeMesh

  field Mesh tetrominoMesh;  // The mesh of the tetromino itself

  /**
   * Construct the tetromino
   *
   * \param tetrominoMesh_ The mesh of the tetromino itself
   * \param relativeXInd_ x-coordinate in the background mesh (i.e. not the tetromino mesh coordinate) relative to top left corner of relativeMesh
   * \param relativeYInd_ y-coordinate in the background mesh (i.e. not the tetromino mesh coordinate) relative to top left corner of relativeMesh
   * \param tetrominoElementSize_ Size of a tetromino element
   */
   // FIXME: skipRows not needed when have relative mesh
  constructor Tetromino new(Mesh tetrominoMesh_,
                            int relativeXInd_,
                            int relativeYInd_,
                            int tetrominoElementSize_) {
    let tetrominoMesh = tetrominoMesh_;

    let relativeXInd = relativeXInd_;
    let relativeYInd = relativeYInd_;

    return this;
  }

  /**
   * Destroy the Tetromino
   *
   * Disposes:
   * - The tetrominoMesh
   * - This
   */
  method void dispose (){
    do tetrominoMesh.dispose();
    do Memory.deAlloc(this);
    return;
  }

  /**
   * Rotate the tetromino clockwise
   */
  method void rotate(){
    return;
  }

  /**
   * Return true if it's possible to spawn the tetromino in the gameMesh
   *
   * \param gameBackground The game background
   * \return true if it's possible to spawn the tetromino
   */
   // FIXME: Must change to background, from there can get the mesh
  method bool canSpawn(Background gameBackground){
    var bool canBeSpawn;

    let canBeSpawn = canBePlaced(gameBackground.getBackgroundMesh(), relativeXInd, relativeYInd);

    if(canBeSpawn){
      do draw();
      return true;
    } else{
      return false;
    }
  }

  /**
   * Return true if it's possible to place the tetromino with the new coordinates in the gameMesh
   *
   * \param gameMesh The gameMesh
   * \param newrelativeXInd The new x-coordinate in the gameMesh
   * \param newrelativeYInd The new y-coordinate in the gameMesh
   * \return true if it's possible to place the tetromino
   */
  method bool canBePlaced(Mesh gameMesh, int newrelativeXInd, int newrelativeYInd){
    var int tetrominoMeshIndex;
    var int tetrominoXIndex;
    var int tetrominoYIndex;
    var int gameXInd;
    var int gameYInd;

    var Array tetrominoIndices;  // Will be destroyed by the Mesh

    while(tetrominoMeshIndex < tetrominoMesh.getMeshLength()){
      let tetrominoIndices = tetrominoMesh.getMeshIndices(tetrominoMeshIndex);
      let tetrominoXIndex = tetrominoIndices[0];
      let tetrominoYIndex = tetrominoIndices[1];

      let gameXInd = newrelativeXInd + tetrominoXIndex;
      let gameYInd = newrelativeYInd + tetrominoYIndex;

      // Check that x is within limits
      if (gameXInd < 0){ return false; }
      // -1 as gameXInd counts from 0
      if (gameXInd > (gameMesh.getCols() - 1)){ return false; }

      // Check that y is within limits
      if (gameYInd < 0){ return false; }
      // -1 as gameYInd counts from 0
      if (gameYInd > (gameMesh.getRows() - 1)){ return false; }

      // Check whether we would collide
      if (gameMesh.getState(gameXInd, gameYInd)){ return false; }
      let tetrominoMeshIndex = tetrominoMeshIndex + 1;
    }

    return true;
  }

  /**
   * Return true if it's possible to move the tetromino down in the gameMesh
   *
   * \param gameMesh The game mesh
   * \return true if it's possible to move the tetromino down
   */
  method bool canMoveDown(Mesh gameMesh){
    var int newrelativeYInd;
    var bool canPlace;

    let newrelativeYInd = relativeYInd + 1;
    let canPlace = canBePlaced(gameMesh, relativeXInd, newrelativeYInd);

    return canPlace;
  }

  /**
   * Return true if it's possible to move the tetromino to the left in the gameMesh
   *
   * \param gameMesh The game mesh
   * \return true if it's possible to move the tetromino to the left
   */
  method bool canMoveLeft(Mesh gameMesh){
    var int newrelativeXInd;
    var bool canPlace;

    let newrelativeXInd = relativeXInd - 1;
    let canPlace = canBePlaced(gameMesh, newrelativeXInd, relativeYInd);
    return canPlace;
  }

  /**
   * Return true if it's possible to move the tetromino to the right in the gameMesh
   *
   * \param gameMesh The game mesh
   * \return true if it's possible to move the tetromino to the right
   */
  method bool canMoveRight(Mesh gameMesh){
    var int newrelativeXInd;
    var bool canPlace;

    let newrelativeXInd = relativeXInd + 1;
    let canPlace = canBePlaced(gameMesh, newrelativeXInd, relativeYInd);
    return canPlace;
  }

  /** Move the tetromino down in the game mesh */
  method void moveDown(){
    do erase();
    let relativeYInd = relativeYInd + 1;
    do draw();
    return;
  }

  /** Move the tetromino to the left in the game mesh */
  method void moveLeft(){
    do erase();
    let relativeXInd = relativeXInd - 1;
    do draw();
    return;
  }

  /** Move the tetromino to the right in the game mesh */
  method void moveRight(){
    do erase();
    let relativeXInd = relativeXInd + 1;
    do draw();
    return;
  }

  /** Return the tetrominoMesh */
  method int getTetrominoMesh(){
    return tetrominoMesh;
  }

  /** Return relativeXInd */
  method int getRelativeXInd(){
    return relativeXInd;
  }

  /** Return relativeYInd */
  method int getRelativeYInd(){
    return relativeYInd;
  }

}
