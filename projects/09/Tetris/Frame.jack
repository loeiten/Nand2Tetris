/**
 * Implements the Frame class
 */

 class Frame {
  field int frameStartX;
  field int frameStartY;
  field int meshElementSize;

  constructor Frame new(int frameStartX_, int frameStartY_, int meshElementSize_) {
    let frameStartX = frameStartX_;
    let frameStartY = frameStartY_;
    let meshElementSize = meshElementSize_;

    return this;
  }

  method void dispose (){
    do Memory.deAlloc(this);
    return;
  }

  method void draw(Mesh frameMesh){
    // FIXME: Some rows should not be drawn (e.g. spawn area)
    var int index;
    var Array indices;
    var int xInd;
    var int yInd;
    var int xStartPixel;
    var int yStartPixel;
    var bool state;


    // NOTE: The mesh is 40x10 according to the guidelines, however, rows above
    //       20 is hidden
    //       Row 0 starts at index 0
    //       Row 1 starts at index 10, thus
    //       Row 20 starts at index 20*10=200
    // https://tetris.fandom.com/wiki/Tetris_Guideline#List_of_rules_(as_of_2009)
    let index = 200;
    while (index < frameMesh.getMeshLenght()){
      let indices = frameMesh.getMeshIndices(index);
      let xInd = indices[0];
      let yInd = indices[1];
      let state = frameMesh.getState(xInd, yInd);

      let xStartPixel = frameStartX + (meshElementSize*xInd) + (2*xInd);
      let yStartPixel = frameStartY + (meshElementSize*yInd) + (2*yInd);

      do Screen.setColor(state);
      do Screen.drawRectangle(xStartPixel, yStartPixel, xStartPixel+meshElementSize, yStartPixel+meshElementSize);

      let index = index + 1;
    }

    // FIXME: Unsure if should dispose Array here
    // FIXME: Unsure if should dispose mesh here, think no as everything is passed by reference
    return;
  }

 }
