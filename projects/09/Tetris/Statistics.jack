/**
 * Implements the class responsible for updating and drawing the statistics.
 */

class Statistics {
  field Background statBackground;  // The statistics background
  field Mesh statMesh;  // The statistics mesh

  // The counters
  field int countI;
  field int countJ;
  field int countL;
  field int countO;
  field int countS;
  field int countT;
  field int countZ;

  field String statString;

  /** Construct Statistics */
  constructor Statistics new() {
    // Subtract 1 from frameStartY, and added to frameLenY
    let statBackground = Background.new(
      35, // frameStartX  // FIXME: Fiddle around with numbers to look nice
      22,   // frameStartY
      107, // frameLenX
      232, // frameLenY (240 + 1 for next line + 1 for frame line)
      9,  // tetrominoElementSize
      0,  // skipRows
      6,  // meshCols
      21   // meshRows
    );
    let statMesh = statBackground.getBackgroundMesh();

    // Mock tetrominos
    // Mock I
    do statMesh.setState(1, 1, true);
    do statMesh.setState(1, 2, true);
    do statMesh.setState(1, 3, true);
    do statMesh.setState(1, 4, true);
    // Mock J
    do statMesh.setState(3, 1, true);
    do statMesh.setState(4, 1, true);
    do statMesh.setState(4, 2, true);
    do statMesh.setState(4, 3, true);
    // Mock L
    do statMesh.setState(6, 3, true);
    do statMesh.setState(7, 1, true);
    do statMesh.setState(7, 2, true);
    do statMesh.setState(7, 3, true);
    // Mock O
    do statMesh.setState(9, 1,  true);
    do statMesh.setState(9, 2,  true);
    do statMesh.setState(10, 1, true);
    do statMesh.setState(10, 2, true);
    // Mock S
    do statMesh.setState(12, 2, true);
    do statMesh.setState(12, 3, true);
    do statMesh.setState(13, 1, true);
    do statMesh.setState(13, 2, true);
    // Mock T
    do statMesh.setState(15, 2, true);
    do statMesh.setState(16, 1, true);
    do statMesh.setState(16, 2, true);
    do statMesh.setState(16, 3, true);
    // Mock Z
    do statMesh.setState(18, 1, true);
    do statMesh.setState(18, 2, true);
    do statMesh.setState(19, 2, true);
    do statMesh.setState(19, 3, true);

    // Display
    do statBackground.drawFrame();
    do statBackground.drawMesh(false, false, statMesh, 0, 0);
    let statString = "Statistics";
    do Output.moveCursor(1, 6);
    do Output.printString(statString);

    // Print
    do Output.moveCursor(3, 13);
    do Output.printInt(countI);
    do Output.moveCursor(6, 13);
    do Output.printInt(countJ);
    do Output.moveCursor(9, 13);
    do Output.printInt(countL);
    do Output.moveCursor(12, 13);
    do Output.printInt(countO);
    do Output.moveCursor(15, 13);
    do Output.printInt(countS);
    do Output.moveCursor(18, 13);
    do Output.printInt(countT);
    do Output.moveCursor(21, 13);
    do Output.printInt(countZ);

    return this;
  }

  /** Dispose the statistics */
  method void dispose(){
    do statBackground.dispose();
    do statMesh.dispose();

    // NOTE: We dispose the strings in the destructor
    //       Destroying elsewhere appears to mess with field int initialization
    do statString.dispose();

    do Memory.deAlloc(this);
    return;
  }

  /**
   * Update the count of a specific tetromino
   *
   * \param tetrominoType The type of tetromino to update the count for
   */
  method void updateCounter(int tetrominoType){
    if (tetrominoType = 0){
      let countI = countI + 1;
      do Output.moveCursor(3, 13);
      do Output.printInt(countI);
    }
    if (tetrominoType = 1){
      let countJ = countJ + 1;
      do Output.moveCursor(6, 13);
      do Output.printInt(countJ);
    }
    if (tetrominoType = 2){
      let countL = countL + 1;
      do Output.moveCursor(9, 13);
      do Output.printInt(countL);
    }
    if (tetrominoType = 3){
      let countO = countO + 1;
      do Output.moveCursor(12, 13);
      do Output.printInt(countO);
    }
    if (tetrominoType = 4){
      let countS = countS + 1;
      do Output.moveCursor(15, 13);
      do Output.printInt(countS);
    }
    if (tetrominoType = 5){
      let countT = countT + 1;
      do Output.moveCursor(18, 13);
      do Output.printInt(countT);
    }
    if (tetrominoType = 6){
      let countZ = countZ + 1;
      do Output.moveCursor(21, 13);
      do Output.printInt(countZ);
    }

    return;
  }

}
