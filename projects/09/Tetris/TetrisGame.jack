/**
 * Implements the Tetris game.
 */

/** Class responsible for updating the model of the game */
class TetrisGame {
  field int gameSpeed;  // Speed of the game
  field String gameOverString;  // String containing game over

  field NextTetrominos nextTetrominos;  // The column containing the next tetrominos
  field Statistics stats;  // The column containing the statistics
  field Score score;  // The score table

  field Background gameBackground;  // The game background
  // Destroyed by the gameBackground
  field Mesh gameMesh;  // The game mesh

  /**
   * Construct a new Tetris Game.
   *
   * The constructor will:
   * - Draw the background frame
   * - Initialize the background
   * FIXME: Also fix missing docstrings
   *
   * \param seed The seed
   */
  constructor TetrisGame new(int seed) {
    // Set seed
    do LCGRandom.setSeed(seed);
    // Initialize the background (see README.md for calculation)
    // NOTE: The mesh is 40 according to
    // https://tetris.fandom.com/wiki/Tetris_Guideline#List_of_rules_(as_of_2009)
    let gameBackground = Background.new(185, // frameStartX  // FIXME: Fiddle around with pixels to look nice + 20
                                        6,   // frameStartY
                                        122, // frameLenX
                                        242, // frameLenY (240 + 1 for next line + 1 for frame line)
                                        10,  // tetrominoElementSize
                                        20,  // skipRows
                                        10,  // meshCols
                                        40   // meshRows
                                        );
    let gameMesh = gameBackground.getBackgroundMesh();
    do gameBackground.drawFrame();

    let nextTetrominos = NextTetrominos.new(gameBackground);
    let stats = Statistics.new();
    let score = Score.new();

    // Set initial game speed
    do updateGameSpeed();

    let gameOverString = " Game over! ";

    return this;
  }

  /** Dispose this game. */
  method void dispose() {
    do gameBackground.dispose();
    do gameOverString.dispose();
    do stats.dispose();
    do nextTetrominos.dispose();
    do Memory.deAlloc(this);
    return;
  }

  /**
   * Run the game by:
   *
   * 1. Prepare the tetromino sequence (7-bag draw)
   * 2. Spawning a tetromino
   * 3. Let it fall (capturing of keystrokes happens during fall)
   * 4. Check if a row is covered and remove the row
   * 5. Update the score
   * 6. Check if the game is over
   * FIXME: More?
   */
  method void run() {
    var bool doSpawn;  // Whether we will spawn or not
    var bool gameOver;  // Whether the game is over or not

    var Tetromino curTetromino;  // The current tetromino







    // FIXME: Remove
    var int testRow;
    var int testCol;

    // FIXME:
    var Array myBag;
    var int i;
    do nextTetrominos.fillNumberBag();
    let myBag = nextTetrominos.getNumberBag();
    while(i < 7){
      do Output.moveCursor(i, 0);
      do Output.printInt(myBag[i]);
      let i= i+1;
    }
    do Sys.wait(1000);



    let testRow = 39;

    // FIXME: TestMesh
    while(testRow > 28){
      let testCol = 0;
      while (testCol < 10){
        do gameMesh.setState(testRow, testCol, true);
        let testCol = testCol + 1;
      }
      let testRow = testRow - 1;
    }

    // Make holes
    do gameMesh.setState(39, 0, false);
    do gameMesh.setState(39, 2, false);
    do gameMesh.setState(39, 4, false);
    do gameMesh.setState(39, 6, false);
    do gameMesh.setState(39, 8, false);
    // 38 is due to clearing
    do gameMesh.setState(37, 1, false);
    do gameMesh.setState(37, 3, false);
    do gameMesh.setState(37, 5, false);
    do gameMesh.setState(37, 7, false);
    do gameMesh.setState(37, 9, false);
    // 36 - 35 is due to clearing
    do gameMesh.setState(34, 0, false);
    do gameMesh.setState(34, 4, false);
    do gameMesh.setState(34, 5, false);
    do gameMesh.setState(34, 9, false);
    // 33 - 30 is due to clearing
    do gameMesh.setState(29, 1, false);
    do gameMesh.setState(29, 8, false);

    do gameBackground.drawMesh(false, false, gameMesh, 0, 0);

    // FIXME:
    do score.updateLine(9);
    // FIXME:
    do score.updateLevel();
    do score.updateLevel();
    do score.updateLevel();
    do score.updateLevel();
    do score.updateLevel();
    do score.updateLevel();
    do score.updateLevel();
    do score.updateLevel();
    do score.updateLevel();
    do score.updateLevel();
    do score.updateLevel();
    do score.updateLevel();
    do score.updateLevel();
    do score.updateLevel();
    do score.updateLevel();
    do score.updateLevel();
    do score.updateLevel();
    do updateGameSpeed();






    // Run until game over
    while (~gameOver){
      let curTetromino = nextTetrominos.getNextTetrominos();
      let doSpawn = curTetromino.canSpawn();

      if(doSpawn){
        // Enter the fall sequence
        do tetrominoFall(curTetromino);
        do stats.updateCounter(curTetromino.getTetrominoType());
      }
      // The game can end by "Top out" if a tetromino cannot spawn:
      // https://tetris.fandom.com/wiki/Top_out
      let gameOver = ~doSpawn;

      // Dispose the current tetromino
      do curTetromino.dispose();
    }

    // Display game over
    do Output.moveCursor(11, 25);
    do Output.printString(gameOverString);

    return;
  }

  /** Let the tetromino fall and move it around while falling */
  method void tetrominoFall(Tetromino curTetromino){
    var int countDown;  // Count down until next move down
    var bool falling;  // Whether or not the tetromino is still falling
    var bool lockDelayed;  // Whether or not the lock delay is active
    var char key;  // Variable for capturing key stroke
    var char prevKey;  // Variable for the previous key stroke

    let countDown = gameSpeed;

    let lockDelayed = false;
    let falling = true;

    while(falling){

      if(lockDelayed){
        while(curTetromino.canMoveDown()){
          do curTetromino.moveDown();
        }
      }

      // Wait for a key to be pressed
      while(((key=0) & (countDown > 0))){
        let key = Keyboard.keyPressed();

        do Sys.wait(1);
        let countDown = countDown - 1;
      }
      // If the current key is the same as the previous key it's due to the key
      // not being released before the countDown ended
      // We therefore add a guard to make sure that the key get's properly released
      if (~(key = prevKey)){ do moveWithKeyboard(curTetromino, countDown, key); }
      let prevKey = key;

      // Wait for the key to be release to continue
      // If not the key will be registered several times as the
      // content of the "falling" while loop is traversed quite fast
      while((~(key=0)) & (countDown > 0)){
        let prevKey = 0;
        let key = Keyboard.keyPressed();
        do Sys.wait(1);
        let countDown = countDown - 1;
      }

      // If the time counts out we will add the tetromino with the mesh and destroy it
      // NOTE: We cannot set countDown < 0 to check if countDown is 0
      if(countDown < 1){
        if(curTetromino.canMoveDown()){
          do curTetromino.moveDown();
          let countDown = gameSpeed;
        } else{
          // Lock delay of half a second
          if(~lockDelayed){
            let lockDelayed = true;
            let countDown = 500;
          } else {
            let falling = false;
            do gameMesh.addTetrominoToMesh(curTetromino);
            do gameBackground.drawMesh(false, false, gameMesh, 0, 0);
            do removeFullLines();
          }
        }
      }
    }

    return;
  }

  /**
   * Move the tetromino with the keyboard
   *
   * \param curTetromino The current tetromino
   * \param countDown Remaining time until lock
   * \param key Current key stroke
   */
  method void moveWithKeyboard(Tetromino curTetromino, int countDown, char key){
    var int cellsMoved;

    // Capture up arrow
    if (key = 131) {
      let countDown = 0;
      while(curTetromino.canMoveDown()){
          do curTetromino.moveDown();
          let cellsMoved = cellsMoved + 1;
      }
      do score.updateWithHardDropScore(cellsMoved);
    }
    // Capture down arrow
    if (key = 133) {
      if(curTetromino.canMoveDown()){
        do curTetromino.moveDown();
        do score.updateWithSoftDropScore();
      }
    }
    // Capture left arrow
    if (key = 130) {
      if(curTetromino.canMoveLeft()){
        do curTetromino.moveLeft();
      }
    }
    // Capture right arrow
    if (key = 132) {
      if(curTetromino.canMoveRight()){
        do curTetromino.moveRight();
      }
    }

    return;
  }

  /** Remove full lines */
  method void removeFullLines(){
    var Array rowsToRemove;
    var int nRowsToRemove;
    var int rowNumber;
    var int blinkSpeed;
    var int additionalScore;
    var int prevLineMod;
    var int newLineMod;

    let blinkSpeed = 150;

    let rowsToRemove = getRowsToRemove();

    while(rowNumber < gameBackground.getVisibleRows()){
      if(rowsToRemove[rowNumber]){
        let nRowsToRemove = nRowsToRemove + 1;
      }
      let rowNumber = rowNumber + 1;
    }

    if(nRowsToRemove > 0){
      if (nRowsToRemove > 3){
        // Let the rows blink on Tetris
        do gameBackground.drawRows(rowsToRemove, false);
        do Sys.wait(blinkSpeed);
        do gameBackground.drawRows(rowsToRemove, true);
        do Sys.wait(blinkSpeed);
        do gameBackground.drawRows(rowsToRemove, false);
        do Sys.wait(blinkSpeed);
        do gameBackground.drawRows(rowsToRemove, true);
        do Sys.wait(blinkSpeed);
      }

      do gameBackground.clearLinesAnimation(rowsToRemove);

      // Collapse full rows
      do gameBackground.collapse(rowsToRemove);

      // Update line count
      let prevLineMod = Algorithm.mod(score.getLines(), 10);
      do score.updateLine(nRowsToRemove);
      let newLineMod = Algorithm.mod(score.getLines(), 10);

      // Calculate additional score
      do score.updateWithCollapseScore(nRowsToRemove);

      // Decide whether to level-up
      if(prevLineMod>newLineMod){
        do score.updateLevel();
        do updateGameSpeed();
      }

    }

    // Created in getRowsToRemove
    do rowsToRemove.dispose();
    return;
  }

  /**
   * Get rows to remove
   *
   * \warning The returned array must be manually destroyed
   *
   * \return Array containing the rows to remove
   */
  method Array getRowsToRemove(){
    var int xInd;  // The x coordinate of the Mesh
    var int curRow;  // The y coordinate of the Mesh

    var bool foundWhiteSpace;
    var bool state;

    var Array rowsToRemove;
    var Mesh backgroundMesh;

    // Disposed in removeFullLines
    let rowsToRemove = Array.new(gameBackground.getVisibleRows());

    let backgroundMesh = gameBackground.getBackgroundMesh();
    let curRow = gameBackground.getSkipRows();

    // Loop over all visible rows
    while(curRow < gameBackground.getMeshRows()){
      let xInd = 0;

      // Loop over all rows in a column
      // Reset foundWhiteSpace
      let foundWhiteSpace = false;
      while ((xInd < backgroundMesh.getCols()) & (~foundWhiteSpace)){
        let state = backgroundMesh.getState(curRow, xInd);
        if(state = 0){
          let foundWhiteSpace = true;
        }
        let xInd = xInd + 1;
      }

      // If we didn't find a whitespace, mark the row for removal
      // NOTE: Although we dispose the rowsToRemove, the array is not initialized to zero
      //       Hence we must  specify both rows to remove and rows to keep
      if(~foundWhiteSpace){
        let rowsToRemove[curRow - gameBackground.getSkipRows()] = true;
      } else {
        let rowsToRemove[curRow - gameBackground.getSkipRows()] = false;
      }

      let curRow = curRow + 1;
    }

    return rowsToRemove;
  }

  /**
   * Update game speed
   *
   * According to
   * https://tetris.fandom.com/wiki/Tetris_Worlds#Gravity
   */
  method void updateGameSpeed(){
    // NOTE: As we are only working with integers, we must make a look-up table of the scores
    var int level;
    let level = score.getLevel();

    if(level = 1){ let gameSpeed = 1000; }
    if(level = 2){ let gameSpeed = 793; }
    if(level = 3){ let gameSpeed = 618; }
    if(level = 4){ let gameSpeed = 473; }
    if(level = 5){ let gameSpeed = 355; }
    if(level = 6){ let gameSpeed = 262; }
    if(level = 7){ let gameSpeed = 190; }
    if(level = 8){ let gameSpeed = 135; }
    if(level = 9){ let gameSpeed = 94; }
    if(level = 10){ let gameSpeed = 64; }
    if(level = 11){ let gameSpeed = 43; }
    if(level = 12){ let gameSpeed = 28; }
    if(level = 13){ let gameSpeed = 18; }
    if(level = 14){ let gameSpeed = 11; }
    if(level = 15){ let gameSpeed = 7; }
    if(level = 16){ let gameSpeed = 4; }
    if(level = 17){ let gameSpeed = 3; }
    if(level = 18){ let gameSpeed = 1; }

    // NOTE: If we set gameSpeed to 0, we are not able to move the tetrominos
    //       as we start on countDown = 0

    return;
  }

}
