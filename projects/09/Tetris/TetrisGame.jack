/**
 * Implements the Tetris game.
 */

/** Class responsible for updating the model of the game */
class TetrisGame {
  field int frameStartX;  // The pixel column for the start of the background
  field int frameStartY;  // The pixel row for the start of the background
  field int meshElementSize;  // The size of a tetromino element
  field int gameSpeed;  // Speed of the game

  field Background gameBackground;  // The game background
  // Destroyed by the gameBackground
  field Mesh gameMesh;  // The game mesh

  /**
   * Construct a new Tetris Game.
   *
   * The constructor will:
   * - Draw the background frame
   * - Initialize the background
   */
  constructor TetrisGame new() {
    var int xLen;
    var int yLen;

    // Set initial game speed
    let gameSpeed = 500;

    // Size of tetrominos
    let meshElementSize = 10;

    // Set background frame coordinates
    let frameStartX = 1;
    let frameStartY = 6;
    let xLen = 122;
    let yLen = 242;  // 240 + 1 for next line + 1 for frame line

    // Draw background frame
    do Screen.setColor(true);
    do Screen.drawLine(frameStartX, frameStartY, frameStartX + xLen, frameStartY);
    do Screen.drawLine(frameStartX, frameStartY, frameStartX, frameStartY + yLen);
    do Screen.drawLine(frameStartX + xLen, frameStartY, frameStartX + xLen, frameStartY + yLen);
    do Screen.drawLine(frameStartX, frameStartY + yLen, frameStartX + xLen, frameStartY + yLen);

    // Initialize the background
    // NOTE: The mesh is 40 according to
    // https://tetris.fandom.com/wiki/Tetris_Guideline#List_of_rules_(as_of_2009)
    let gameBackground = Background.new(frameStartX + 2,  // frameStartX_
                                        frameStartY + 2,  // frameStartY_
                                        meshElementSize,      // meshElementSize_
                                        20,               // skipRows_
                                        10,               // meshCols
                                        40                // meshRows
                                        );
    let gameMesh = gameBackground.getBackgroundMesh();

    return this;
  }

  /** Dispose this game. */
  method void dispose() {
    do gameBackground.dispose();
    do gameMesh.dispose();
    do Memory.deAlloc(this);
    return;
  }

  /**
   * Run the game by:
   *
   * 1. Prepare the tetromino sequence (7-bag draw)
   * 2. Spawning a tetromino
   * 3. Let it fall (capturing of keystrokes happens during fall)
   * 4. Check if a row is covered and remove the row
   * 5. Update the score
   * 6. Check if the game is over
   */
  method void run() {
    var bool doSpawn;  // Whether we will spawn or not
    var bool gameOver;  // Whether the game is over or not

    var Tetromino curTetromino;  // The current tetromino
    var TetrominoSpawner tetrominoSpawner;  // The tetromino spawner

    // Create the spawner
    let tetrominoSpawner = TetrominoSpawner.new(frameStartX, frameStartY);

    // FIXME: You are here: Do tests
    // FIXME: Draw a mesh above spawing and test
    //        1. Blinking
    //        2. Collapse

    // Run until game over
    while (~gameOver){
      let curTetromino = tetrominoSpawner.getO();
      let doSpawn = curTetromino.canSpawn(gameMesh);
      if(doSpawn){
        // Enter the fall sequence
        do tetrominoFall(curTetromino);
      }
      // The game can end by "Top out" if a tetromino cannot spawn:
      // https://tetris.fandom.com/wiki/Top_out
      let gameOver = ~doSpawn;

      // Dispose the current tetromino
      do curTetromino.dispose();
    }

    // Dispose the spawner
    do tetrominoSpawner.dispose();

    // Display game over
    do Output.moveCursor(11, 2);
    do Output.printString(" Game over! ");

    return;
  }

  /** Let the tetromino fall and move it around while falling */
  method void tetrominoFall(Tetromino curTetromino){
    var int countDown;  // Count down until next move down
    var bool falling;  // Whether or not the tetromino is still falling
    var char key;  // Variable for capturing key stroke
    var char prevKey;  // Variable for the previous key stroke

    let countDown = gameSpeed;
    let falling = true;

    while(falling){

      // Wait for a key to be pressed
      while(((key=0) & (countDown > 0))){
        let key = Keyboard.keyPressed();

        do Sys.wait(1);
        let countDown = countDown - 1;
      }
      // If the current key is the same as the previous key it's due to the key
      // not being released before the countDown ended
      // We therefore add a guard to make sure that the key get's properly released
      if (~(key = prevKey)){ do moveWithKeyboard(curTetromino, gameMesh, countDown, key); }
      let prevKey = key;

      // Wait for the key to be release to continue
      // If not the key will be registered several times as the
      // content of the "falling" while loop is traversed quite fast
      while((~(key=0)) & (countDown > 0)){
        let prevKey = 0;
        let key = Keyboard.keyPressed();
        do Sys.wait(1);
        let countDown = countDown - 1;
      }

      // If the time counts out we will add the tetromino with the mesh and destroy it
      // NOTE: We cannot set countDown < 0 to check if countDown is 0
      if(countDown < 1){
        if(curTetromino.canMoveDown(gameMesh)){
          do curTetromino.moveDown();
          let countDown = gameSpeed;
        }
        else{
          let falling = false;
          do addTetrominoToMesh(curTetromino);
          do removeFullLines();
        }
      }
    }
    return;
  }

  /**
   * Move the tetromino with the keyboard
   *
   * \param curTetromino The current tetromino
   * \param gameMesh The game mesh
   * \param countDown Remaining time until lock
   * \param key Current key stroke
   */
  method void moveWithKeyboard(Tetromino curTetromino, Mesh gameMesh, int countDown, char key){
    // Capture up arrow
    if (key = 131) {
      let countDown = 0;
      while(curTetromino.canMoveDown(gameMesh)){
          do curTetromino.moveDown();
      }
    }
    // Capture down arrow
    if (key = 133) {
      if(curTetromino.canMoveDown(gameMesh)){
        do curTetromino.moveDown();
      }
    }
    // Capture left arrow
    if (key = 130) {
      if(curTetromino.canMoveLeft(gameMesh)){
        do curTetromino.moveLeft();
      }
    }
    // Capture right arrow
    if (key = 132) {
      if(curTetromino.canMoveRight(gameMesh)){
        do curTetromino.moveRight();
      }
    }

    return;
  }

  /**
   * Add the tetromino to the mesh
   *
   * \param curTetromino The current tetromino
   */
  method void addTetrominoToMesh(Tetromino curTetromino){
    var int gameXInd;  // x-coordinate in the gameMesh
    var int gameYInd;  // y-coordinate in the gameMesh
    var int tetrominoIndex;  // Index in the tetromino mesh

    var int tetrominoMeshLength;  // Length of the tetromino mesh
    // Will be destroyed when Mesh is destroyed in Tetromino
    var Array tetrominoIndexArray;  // The array for the tetromino coordinates
    // Will be destroyed by the Tetromino
    var Mesh tetrominoMesh;  // The tetromino mesh

    let tetrominoMesh = curTetromino.getTetrominoMesh();
    let tetrominoMeshLength = tetrominoMesh.getMeshLength();

    // Add tetromino to the game mesh
    let tetrominoIndex = 0;
    while(tetrominoIndex < tetrominoMeshLength){
      let tetrominoIndexArray = tetrominoMesh.getMeshIndices(tetrominoIndex);
      let gameXInd = curTetromino.getRelativeMeshX() + tetrominoIndexArray[0];
      let gameYInd = curTetromino.getRelativeMeshY() + tetrominoIndexArray[1];
      do gameMesh.setState(gameXInd, gameYInd, true);
      let tetrominoIndex = tetrominoIndex + 1;
    }
    do gameBackground.draw();

    return;
  }

  /** Remove full lines */
  method void removeFullLines(){
    var Array rowsToRemove;
    var bool removeAnyRow;
    var int rowNumber;

    let rowsToRemove = getRowsToRemove();
    let removeAnyRow = false;
    while((rowNumber < gameBackground.getVisibleRows()) & (~removeAnyRow)){
      if( rowsToRemove[rowNumber] ){ let removeAnyRow = true; }
      let rowNumber = rowNumber + 1;
    }

    if(removeAnyRow){
      // Let the rows blink
      do gameBackground.drawRows(rowsToRemove, false);
      do Sys.wait(50);
      do gameBackground.drawRows(rowsToRemove, true);
      do Sys.wait(50);
      do gameBackground.drawRows(rowsToRemove, false);

      // Collapse full rows
      do gameBackground.collapse(rowsToRemove);
    }

    do rowsToRemove.dispose();
    return;
  }

  /**
   * Get rows to remove
   *
   * \warning The returned array must be manually destroyed
   */
  method Array getRowsToRemove(){
    var int xInd;  // The x coordinate of the Mesh
    var int curRow;  // The y coordinate of the Mesh

    var bool foundWhiteSpace;
    var bool state;

    var Array rowsToRemove;
    var Mesh backgroundMesh;


    let rowsToRemove = Array.new(gameBackground.getVisibleRows());
    let backgroundMesh = gameBackground.getBackgroundMesh();

    let curRow = gameBackground.getSkipRows();

    // Loop over all visible rows
    while(curRow < gameBackground.getVisibleRows()){
      let xInd = 0;

      // Loop over all rows in a column
      // Reset foundWhiteSpace
      let foundWhiteSpace = false;
      while ((xInd < backgroundMesh.getRows()) & (~foundWhiteSpace)){
        let state = backgroundMesh.getState(xInd, curRow);
        if(state = 0){ let foundWhiteSpace = true; }
        let xInd = xInd + 1;
      }

      // If we didn't find a whitespace, mark the row for removal
      if(~foundWhiteSpace){ let rowsToRemove[curRow - gameBackground.getSkipRows()] = true; }

      let curRow = curRow + 1;
    }

    return rowsToRemove;
  }

}
