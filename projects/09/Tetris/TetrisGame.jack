/**
 * Implements the Tetris game.
 */

class TetrisGame {
  field int frameStartX;
  field int frameStartY;
  field int elementSize;
  field int gameSpeed;

  field Frame gameFrame;
  field Mesh gameMesh;

  /** Constructs a new Tetris Game. */
  constructor TetrisGame new() {
    var int xLen;
    var int yLen;

    let frameStartX = 1;
    let frameStartY = 6;
    let xLen = 122;
    let yLen = 242;  // 240 + 1 for next line + 1 for frame line

    let elementSize = 10;

    let gameSpeed = 500;

    // Draw background frame
    do Screen.setColor(true);
    do Screen.drawLine(frameStartX, frameStartY, frameStartX + xLen, frameStartY);
    do Screen.drawLine(frameStartX, frameStartY, frameStartX, frameStartY + yLen);
    do Screen.drawLine(frameStartX + xLen, frameStartY, frameStartX + xLen, frameStartY + yLen);
    do Screen.drawLine(frameStartX, frameStartY + yLen, frameStartX + xLen, frameStartY + yLen);

    // Initialize the game frame and the game mesh
    let gameFrame = Frame.new(frameStartX + 2, frameStartY + 2, elementSize);
    // NOTE: The mesh is 40 according to
    // https://tetris.fandom.com/wiki/Tetris_Guideline#List_of_rules_(as_of_2009)
    let gameMesh = Mesh.new(10, 40);
    return this;
  }

  /** Disposes this game. */
  method void dispose() {
    do gameFrame.dispose();
    do gameMesh.dispose();
    do Memory.deAlloc(this);
    return;
  }

  /** Runs the game: handles the user's inputs and moves the tetris accordingly */
  method void run() {
    var int x;
    var int y;
    var int startX;
    var int startY;

    var int counter;

    var Tetromino curTetromino;

    var TetrominoSpawner tetrominoSpawner;

    let counter = 0;
    let startX = frameStartX + 2;  // +1 for fram line and +1 for whitespace padding
    let startY = frameStartY + 2;  // +1 for fram line and +1 for whitespace padding

    do Screen.setColor(true);

    // Test locking tetrominos
    let tetrominoSpawner = TetrominoSpawner.new(frameStartX, frameStartY);
    let counter = 0;
    // FIXME: Let game end by Top out: https://tetris.fandom.com/wiki/Top_out
    while (counter < 5){

      let curTetromino = tetrominoSpawner.spawnO();
      do tetrominoFall(curTetromino);


      // FIXME: For cell in tetromino get gameMesh coordinates and set state to true
      let counter = counter+1;
    }

    // FIXME: Real mesh must have some rows hidden for user

    // We can now free the memory as these are no longer needed
    do curTetromino.dispose();
    do tetrominoSpawner.dispose();

    do Output.moveCursor(3, 30);
    do Output.printString("Done!");

    do Sys.wait(2000);


    // while (~exit) {
    //    // waits for a key to be pressed
    //    while (key = 0) {
    //       let key = Keyboard.keyPressed();
    //       do moveTetris();
    //    }
    //    if (key = 81)  { let exit = true; }     // q key
    //    if (key = 90)  { do tetris.decSize(); } // z key
    //    if (key = 88)  { do tetris.incSize(); } // x key
    //    if (key = 131) { let direction = 1; }   // up arrow
    //    if (key = 133) { let direction = 2; }   // down arrow
    //    if (key = 130) { let direction = 3; }   // left arrow
    //    if (key = 132) { let direction = 4; }   // right arrow

    //    // waits for the key to be released
    //    while (~(key = 0)) {
    //       let key = Keyboard.keyPressed();
    //       do moveTetris();
    //    }
    // } // while
    return;
  }

  method void tetrominoFall(Tetromino curTetromino){
    var bool falling;
    var int index;
    var int meshLenght;
    var int gameXInd;
    var int gameYInd;
    var Array tetrominoIndexArray;
    var Mesh tetrominoMesh;

    let tetrominoMesh = curTetromino.getTetrominoMesh();
    let meshLenght = tetrominoMesh.getMeshLenght();
    let falling = true;
    while(falling){
      // FIXME: Have counter which is updated instead of gameSpeed
      do Sys.wait(gameSpeed);

      if(curTetromino.canMoveDown(gameMesh)){
        do curTetromino.moveDown();
      }
      else{
        let falling = false;
        // Add tetromino to the game mesh
        let index = 0;
        while(index < meshLenght){
          let tetrominoIndexArray = tetrominoMesh.getMeshIndices(index);
          let gameXInd = curTetromino.getRelativeMeshX() + tetrominoIndexArray[0];
          let gameYInd = curTetromino.getRelativeMeshY() + tetrominoIndexArray[1];
          do gameMesh.setState(gameXInd, gameYInd, true);
          let index = index + 1;
        }
        do gameFrame.draw(gameMesh);

        // FIXME: ???
        // The tetromino can now be destroyed
        do curTetromino.dispose();
      }
    }

    // FIXME: dispose array???
    // FIXME: dispose meshes???
    return;
  }
}
